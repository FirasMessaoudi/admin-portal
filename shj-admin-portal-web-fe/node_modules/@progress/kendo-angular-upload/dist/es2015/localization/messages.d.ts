/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ComponentMessages } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class Messages extends ComponentMessages {
    /**
     * Sets the text for the **Cancel** button.
     */
    cancel: string;
    /**
     * Sets the text for the **Clear** button.
     */
    clearSelectedFiles: string;
    /**
     * Sets the drop-zone hint.
     */
    dropFilesHere: string;
    /**
     * Sets the external drop-zone hint.
     */
    externalDropFilesHere: string;
    /**
     * Sets the status message for a batch of files.
     */
    filesBatchStatus: string;
    /**
     * Sets the status message for a batch of files after failed upload.
     */
    filesBatchStatusFailed: string;
    /**
     * Sets the status message for a batch of files after successful upload.
     */
    filesBatchStatusUploaded: string;
    /**
     * Sets the file status message after failed upload.
     */
    fileStatusFailed: string;
    /**
     * Sets the file status message after successful upload.
     */
    fileStatusUploaded: string;
    /**
     * Sets the header status message when the file upload is paused.
     */
    headerStatusPaused: string;
    /**
     * Sets the header status message after the file upload completes.
     */
    headerStatusUploaded: string;
    /**
     * Sets the header status message during the upload of the file.
     */
    headerStatusUploading: string;
    /**
     * Sets the text for the invalid `allowedExtensions` restriction message.
     */
    invalidFileExtension: string;
    /**
     * Sets the text for the invalid `maxFileSize` restriction message.
     */
    invalidMaxFileSize: string;
    /**
     * Sets the text for the invalid `minFileSize` restriction message.
     */
    invalidMinFileSize: string;
    /**
     * Sets the text for the **Pause** button.
     */
    pause: string;
    /**
     * Sets the text for the **Remove** button.
     */
    remove: string;
    /**
     * Sets the text for the **Resume** button.
     */
    resume: string;
    /**
     * Sets the text for the **Retry** button.
     */
    retry: string;
    /**
     * Sets the text for the **Select** button.
     */
    select: string;
    /**
     * Sets the text for the **Upload files** button.
     */
    uploadSelectedFiles: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Messages, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Messages, never, never, { "cancel": "cancel"; "clearSelectedFiles": "clearSelectedFiles"; "dropFilesHere": "dropFilesHere"; "externalDropFilesHere": "externalDropFilesHere"; "filesBatchStatus": "filesBatchStatus"; "filesBatchStatusFailed": "filesBatchStatusFailed"; "filesBatchStatusUploaded": "filesBatchStatusUploaded"; "fileStatusFailed": "fileStatusFailed"; "fileStatusUploaded": "fileStatusUploaded"; "headerStatusPaused": "headerStatusPaused"; "headerStatusUploaded": "headerStatusUploaded"; "headerStatusUploading": "headerStatusUploading"; "invalidFileExtension": "invalidFileExtension"; "invalidMaxFileSize": "invalidMaxFileSize"; "invalidMinFileSize": "invalidMinFileSize"; "pause": "pause"; "remove": "remove"; "resume": "resume"; "retry": "retry"; "select": "select"; "uploadSelectedFiles": "uploadSelectedFiles"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuZC50cyIsInNvdXJjZXMiOlsibWVzc2FnZXMuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENvbXBvbmVudE1lc3NhZ2VzIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWVzc2FnZXMgZXh0ZW5kcyBDb21wb25lbnRNZXNzYWdlcyB7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dCBmb3IgdGhlICoqQ2FuY2VsKiogYnV0dG9uLlxuICAgICAqL1xuICAgIGNhbmNlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHQgZm9yIHRoZSAqKkNsZWFyKiogYnV0dG9uLlxuICAgICAqL1xuICAgIGNsZWFyU2VsZWN0ZWRGaWxlczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRyb3Atem9uZSBoaW50LlxuICAgICAqL1xuICAgIGRyb3BGaWxlc0hlcmU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBleHRlcm5hbCBkcm9wLXpvbmUgaGludC5cbiAgICAgKi9cbiAgICBleHRlcm5hbERyb3BGaWxlc0hlcmU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGF0dXMgbWVzc2FnZSBmb3IgYSBiYXRjaCBvZiBmaWxlcy5cbiAgICAgKi9cbiAgICBmaWxlc0JhdGNoU3RhdHVzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhdHVzIG1lc3NhZ2UgZm9yIGEgYmF0Y2ggb2YgZmlsZXMgYWZ0ZXIgZmFpbGVkIHVwbG9hZC5cbiAgICAgKi9cbiAgICBmaWxlc0JhdGNoU3RhdHVzRmFpbGVkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhdHVzIG1lc3NhZ2UgZm9yIGEgYmF0Y2ggb2YgZmlsZXMgYWZ0ZXIgc3VjY2Vzc2Z1bCB1cGxvYWQuXG4gICAgICovXG4gICAgZmlsZXNCYXRjaFN0YXR1c1VwbG9hZGVkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZmlsZSBzdGF0dXMgbWVzc2FnZSBhZnRlciBmYWlsZWQgdXBsb2FkLlxuICAgICAqL1xuICAgIGZpbGVTdGF0dXNGYWlsZWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBmaWxlIHN0YXR1cyBtZXNzYWdlIGFmdGVyIHN1Y2Nlc3NmdWwgdXBsb2FkLlxuICAgICAqL1xuICAgIGZpbGVTdGF0dXNVcGxvYWRlZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhlYWRlciBzdGF0dXMgbWVzc2FnZSB3aGVuIHRoZSBmaWxlIHVwbG9hZCBpcyBwYXVzZWQuXG4gICAgICovXG4gICAgaGVhZGVyU3RhdHVzUGF1c2VkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGVhZGVyIHN0YXR1cyBtZXNzYWdlIGFmdGVyIHRoZSBmaWxlIHVwbG9hZCBjb21wbGV0ZXMuXG4gICAgICovXG4gICAgaGVhZGVyU3RhdHVzVXBsb2FkZWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoZWFkZXIgc3RhdHVzIG1lc3NhZ2UgZHVyaW5nIHRoZSB1cGxvYWQgb2YgdGhlIGZpbGUuXG4gICAgICovXG4gICAgaGVhZGVyU3RhdHVzVXBsb2FkaW5nOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dCBmb3IgdGhlIGludmFsaWQgYGFsbG93ZWRFeHRlbnNpb25zYCByZXN0cmljdGlvbiBtZXNzYWdlLlxuICAgICAqL1xuICAgIGludmFsaWRGaWxlRXh0ZW5zaW9uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dCBmb3IgdGhlIGludmFsaWQgYG1heEZpbGVTaXplYCByZXN0cmljdGlvbiBtZXNzYWdlLlxuICAgICAqL1xuICAgIGludmFsaWRNYXhGaWxlU2l6ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHQgZm9yIHRoZSBpbnZhbGlkIGBtaW5GaWxlU2l6ZWAgcmVzdHJpY3Rpb24gbWVzc2FnZS5cbiAgICAgKi9cbiAgICBpbnZhbGlkTWluRmlsZVNpemU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0ZXh0IGZvciB0aGUgKipQYXVzZSoqIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBwYXVzZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHQgZm9yIHRoZSAqKlJlbW92ZSoqIGJ1dHRvbi5cbiAgICAgKi9cbiAgICByZW1vdmU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0ZXh0IGZvciB0aGUgKipSZXN1bWUqKiBidXR0b24uXG4gICAgICovXG4gICAgcmVzdW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dCBmb3IgdGhlICoqUmV0cnkqKiBidXR0b24uXG4gICAgICovXG4gICAgcmV0cnk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0ZXh0IGZvciB0aGUgKipTZWxlY3QqKiBidXR0b24uXG4gICAgICovXG4gICAgc2VsZWN0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dCBmb3IgdGhlICoqVXBsb2FkIGZpbGVzKiogYnV0dG9uLlxuICAgICAqL1xuICAgIHVwbG9hZFNlbGVjdGVkRmlsZXM6IHN0cmluZztcbn1cbiJdfQ==