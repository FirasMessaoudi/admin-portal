/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { HttpClient } from '@angular/common/http';
import { EventEmitter } from '@angular/core';
import { AsyncSettings } from './types/async-settings';
import { FileInfo } from './types';
import { FileMap } from './types/file-map';
import { CancelEvent, ClearEvent, ErrorEvent, PauseEvent, RemoveEvent, ResumeEvent, SelectEvent, SuccessEvent, UploadEvent, UploadProgressEvent } from './events';
import { ChunkSettings } from './types';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare type ComponentType = 'FileSelect' | 'Upload';
/**
 * @hidden
 */
export declare class UploadService {
    private http;
    cancelEvent: EventEmitter<CancelEvent>;
    clearEvent: EventEmitter<ClearEvent>;
    completeEvent: EventEmitter<any>;
    errorEvent: EventEmitter<ErrorEvent>;
    pauseEvent: EventEmitter<PauseEvent>;
    removeEvent: EventEmitter<RemoveEvent>;
    resumeEvent: EventEmitter<ResumeEvent>;
    selectEvent: EventEmitter<SelectEvent>;
    successEvent: EventEmitter<SuccessEvent>;
    uploadEvent: EventEmitter<UploadEvent>;
    uploadProgressEvent: EventEmitter<UploadProgressEvent>;
    /**
     * Required for the `ControlValueAccessor` integration
     */
    changeEvent: EventEmitter<Array<FileInfo>>;
    /**
     * Default async settings
     */
    async: AsyncSettings;
    /**
     * Default chunk settings
     */
    chunk: ChunkSettings;
    component: ComponentType;
    private chunkMap;
    private fileList;
    constructor(http: HttpClient);
    readonly files: FileMap;
    setChunkSettings(settings: ChunkSettings | boolean): void;
    onChange(): void;
    addFiles(files: Array<FileInfo>): void;
    addInitialFiles(initialFiles: Array<FileInfo>): void;
    addInitialFileSelectFiles(initialFiles: Array<any>): void;
    resumeFile(uid: string): void;
    pauseFile(uid: string): void;
    removeFiles(uid: string): void;
    cancelFiles(uid: string): void;
    clearFiles(): void;
    uploadFiles(): void;
    retryFiles(uid: string): void;
    private _uploadFiles;
    private performRemove;
    private performUpload;
    private onSuccess;
    private onError;
    private onProgress;
    private onChunkProgress;
    private checkAllComplete;
    private shouldUploadNextFile;
    private cloneRequestHeaders;
    private populateRequestOptions;
    private populateUploadFormData;
    private populateRemoveFormData;
    private populateClientFormData;
    private getNextChunk;
    private getChunkInfo;
    private updateChunkInfo;
    private removeChunkInfo;
    private getChunkMetadata;
    private isChunkUploadComplete;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UploadService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<UploadService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsidXBsb2FkLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBc3luY1NldHRpbmdzIH0gZnJvbSAnLi90eXBlcy9hc3luYy1zZXR0aW5ncyc7XG5pbXBvcnQgeyBGaWxlSW5mbyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgRmlsZU1hcCB9IGZyb20gJy4vdHlwZXMvZmlsZS1tYXAnO1xuaW1wb3J0IHsgQ2FuY2VsRXZlbnQsIENsZWFyRXZlbnQsIEVycm9yRXZlbnQsIFBhdXNlRXZlbnQsIFJlbW92ZUV2ZW50LCBSZXN1bWVFdmVudCwgU2VsZWN0RXZlbnQsIFN1Y2Nlc3NFdmVudCwgVXBsb2FkRXZlbnQsIFVwbG9hZFByb2dyZXNzRXZlbnQgfSBmcm9tICcuL2V2ZW50cyc7XG5pbXBvcnQgeyBDaHVua1NldHRpbmdzIH0gZnJvbSAnLi90eXBlcyc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBDb21wb25lbnRUeXBlID0gJ0ZpbGVTZWxlY3QnIHwgJ1VwbG9hZCc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVXBsb2FkU2VydmljZSB7XG4gICAgcHJpdmF0ZSBodHRwO1xuICAgIGNhbmNlbEV2ZW50OiBFdmVudEVtaXR0ZXI8Q2FuY2VsRXZlbnQ+O1xuICAgIGNsZWFyRXZlbnQ6IEV2ZW50RW1pdHRlcjxDbGVhckV2ZW50PjtcbiAgICBjb21wbGV0ZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBlcnJvckV2ZW50OiBFdmVudEVtaXR0ZXI8RXJyb3JFdmVudD47XG4gICAgcGF1c2VFdmVudDogRXZlbnRFbWl0dGVyPFBhdXNlRXZlbnQ+O1xuICAgIHJlbW92ZUV2ZW50OiBFdmVudEVtaXR0ZXI8UmVtb3ZlRXZlbnQ+O1xuICAgIHJlc3VtZUV2ZW50OiBFdmVudEVtaXR0ZXI8UmVzdW1lRXZlbnQ+O1xuICAgIHNlbGVjdEV2ZW50OiBFdmVudEVtaXR0ZXI8U2VsZWN0RXZlbnQ+O1xuICAgIHN1Y2Nlc3NFdmVudDogRXZlbnRFbWl0dGVyPFN1Y2Nlc3NFdmVudD47XG4gICAgdXBsb2FkRXZlbnQ6IEV2ZW50RW1pdHRlcjxVcGxvYWRFdmVudD47XG4gICAgdXBsb2FkUHJvZ3Jlc3NFdmVudDogRXZlbnRFbWl0dGVyPFVwbG9hZFByb2dyZXNzRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIFJlcXVpcmVkIGZvciB0aGUgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYCBpbnRlZ3JhdGlvblxuICAgICAqL1xuICAgIGNoYW5nZUV2ZW50OiBFdmVudEVtaXR0ZXI8QXJyYXk8RmlsZUluZm8+PjtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGFzeW5jIHNldHRpbmdzXG4gICAgICovXG4gICAgYXN5bmM6IEFzeW5jU2V0dGluZ3M7XG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBjaHVuayBzZXR0aW5nc1xuICAgICAqL1xuICAgIGNodW5rOiBDaHVua1NldHRpbmdzO1xuICAgIGNvbXBvbmVudDogQ29tcG9uZW50VHlwZTtcbiAgICBwcml2YXRlIGNodW5rTWFwO1xuICAgIHByaXZhdGUgZmlsZUxpc3Q7XG4gICAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCk7XG4gICAgcmVhZG9ubHkgZmlsZXM6IEZpbGVNYXA7XG4gICAgc2V0Q2h1bmtTZXR0aW5ncyhzZXR0aW5nczogQ2h1bmtTZXR0aW5ncyB8IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9uQ2hhbmdlKCk6IHZvaWQ7XG4gICAgYWRkRmlsZXMoZmlsZXM6IEFycmF5PEZpbGVJbmZvPik6IHZvaWQ7XG4gICAgYWRkSW5pdGlhbEZpbGVzKGluaXRpYWxGaWxlczogQXJyYXk8RmlsZUluZm8+KTogdm9pZDtcbiAgICBhZGRJbml0aWFsRmlsZVNlbGVjdEZpbGVzKGluaXRpYWxGaWxlczogQXJyYXk8YW55Pik6IHZvaWQ7XG4gICAgcmVzdW1lRmlsZSh1aWQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgcGF1c2VGaWxlKHVpZDogc3RyaW5nKTogdm9pZDtcbiAgICByZW1vdmVGaWxlcyh1aWQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgY2FuY2VsRmlsZXModWlkOiBzdHJpbmcpOiB2b2lkO1xuICAgIGNsZWFyRmlsZXMoKTogdm9pZDtcbiAgICB1cGxvYWRGaWxlcygpOiB2b2lkO1xuICAgIHJldHJ5RmlsZXModWlkOiBzdHJpbmcpOiB2b2lkO1xuICAgIHByaXZhdGUgX3VwbG9hZEZpbGVzO1xuICAgIHByaXZhdGUgcGVyZm9ybVJlbW92ZTtcbiAgICBwcml2YXRlIHBlcmZvcm1VcGxvYWQ7XG4gICAgcHJpdmF0ZSBvblN1Y2Nlc3M7XG4gICAgcHJpdmF0ZSBvbkVycm9yO1xuICAgIHByaXZhdGUgb25Qcm9ncmVzcztcbiAgICBwcml2YXRlIG9uQ2h1bmtQcm9ncmVzcztcbiAgICBwcml2YXRlIGNoZWNrQWxsQ29tcGxldGU7XG4gICAgcHJpdmF0ZSBzaG91bGRVcGxvYWROZXh0RmlsZTtcbiAgICBwcml2YXRlIGNsb25lUmVxdWVzdEhlYWRlcnM7XG4gICAgcHJpdmF0ZSBwb3B1bGF0ZVJlcXVlc3RPcHRpb25zO1xuICAgIHByaXZhdGUgcG9wdWxhdGVVcGxvYWRGb3JtRGF0YTtcbiAgICBwcml2YXRlIHBvcHVsYXRlUmVtb3ZlRm9ybURhdGE7XG4gICAgcHJpdmF0ZSBwb3B1bGF0ZUNsaWVudEZvcm1EYXRhO1xuICAgIHByaXZhdGUgZ2V0TmV4dENodW5rO1xuICAgIHByaXZhdGUgZ2V0Q2h1bmtJbmZvO1xuICAgIHByaXZhdGUgdXBkYXRlQ2h1bmtJbmZvO1xuICAgIHByaXZhdGUgcmVtb3ZlQ2h1bmtJbmZvO1xuICAgIHByaXZhdGUgZ2V0Q2h1bmtNZXRhZGF0YTtcbiAgICBwcml2YXRlIGlzQ2h1bmtVcGxvYWRDb21wbGV0ZTtcbn1cbiJdfQ==