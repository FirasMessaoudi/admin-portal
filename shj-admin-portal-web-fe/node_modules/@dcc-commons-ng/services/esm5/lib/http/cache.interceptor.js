import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { HttpCacheService } from './http-cache.service';
/**
 * Caches HTTP requests.
 * Use ExtendedHttpClient fluent API to configure caching for each request.
 */
var CacheInterceptor = /** @class */ (function () {
    function CacheInterceptor(httpCacheService) {
        this.httpCacheService = httpCacheService;
        this.forceUpdate = false;
    }
    CacheInterceptor_1 = CacheInterceptor;
    /**
     * Configures interceptor options
     * @param {{update: boolean}} options If update option is enabled, forces request to be made and updates cache entry.
     * @return {CacheInterceptor} The configured instance.
     */
    CacheInterceptor.prototype.configure = function (options) {
        var instance = new CacheInterceptor_1(this.httpCacheService);
        if (options && options.update) {
            instance.forceUpdate = true;
        }
        return instance;
    };
    CacheInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        if (request.method !== 'GET') {
            return next.handle(request);
        }
        return new Observable(function (subscriber) {
            var cachedData = _this.forceUpdate ? null : _this.httpCacheService.getCacheData(request.urlWithParams);
            if (cachedData !== null) {
                // Create new response to avoid side-effects
                subscriber.next(new HttpResponse(cachedData));
                subscriber.complete();
            }
            else {
                next.handle(request)
                    .subscribe(function (event) {
                    if (event instanceof HttpResponse) {
                        _this.httpCacheService.setCacheData(request.urlWithParams, event);
                    }
                    subscriber.next(event);
                }, function (error) { return subscriber.error(error); }, function () { return subscriber.complete(); });
            }
        });
    };
    var CacheInterceptor_1;
    CacheInterceptor.ctorParameters = function () { return [
        { type: HttpCacheService }
    ]; };
    CacheInterceptor = CacheInterceptor_1 = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpCacheService])
    ], CacheInterceptor);
    return CacheInterceptor;
}());
export { CacheInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGNjLWNvbW1vbnMtbmcvc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvaHR0cC9jYWNoZS5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQXVELFlBQVksRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3hHLE9BQU8sRUFBQyxVQUFVLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFFNUMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFdEQ7OztHQUdHO0FBRUg7SUFJRSwwQkFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFGOUMsZ0JBQVcsR0FBRyxLQUFLLENBQUM7SUFHNUIsQ0FBQzt5QkFMVSxnQkFBZ0I7SUFPM0I7Ozs7T0FJRztJQUNILG9DQUFTLEdBQVQsVUFBVSxPQUFxQztRQUM3QyxJQUFNLFFBQVEsR0FBRyxJQUFJLGtCQUFnQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzdELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDN0IsUUFBUSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDN0I7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsb0NBQVMsR0FBVCxVQUFVLE9BQXlCLEVBQUUsSUFBaUI7UUFBdEQsaUJBeUJDO1FBeEJDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzdCO1FBRUQsT0FBTyxJQUFJLFVBQVUsQ0FBQyxVQUFDLFVBQXNDO1lBQzNELElBQU0sVUFBVSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDdkcsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFO2dCQUN2Qiw0Q0FBNEM7Z0JBQzVDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsVUFBb0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hELFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUN2QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztxQkFDakIsU0FBUyxDQUNSLFVBQUEsS0FBSztvQkFDSCxJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7d0JBQ2pDLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztxQkFDbEU7b0JBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDekIsQ0FBQyxFQUNELFVBQUEsS0FBSyxJQUFJLE9BQUEsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBdkIsQ0FBdUIsRUFDaEMsY0FBTSxPQUFBLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBckIsQ0FBcUIsQ0FDNUIsQ0FBQzthQUNMO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7Z0JBekNxQyxnQkFBZ0I7O0lBSjNDLGdCQUFnQjtRQUQ1QixVQUFVLEVBQUU7eUNBSzJCLGdCQUFnQjtPQUozQyxnQkFBZ0IsQ0ErQzVCO0lBQUQsdUJBQUM7Q0FBQSxBQS9DRCxJQStDQztTQS9DWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2V9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3Vic2NyaWJlcn0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7SHR0cENhY2hlU2VydmljZX0gZnJvbSAnLi9odHRwLWNhY2hlLnNlcnZpY2UnO1xuXG4vKipcbiAqIENhY2hlcyBIVFRQIHJlcXVlc3RzLlxuICogVXNlIEV4dGVuZGVkSHR0cENsaWVudCBmbHVlbnQgQVBJIHRvIGNvbmZpZ3VyZSBjYWNoaW5nIGZvciBlYWNoIHJlcXVlc3QuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYWNoZUludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICBwcml2YXRlIGZvcmNlVXBkYXRlID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2FjaGVTZXJ2aWNlOiBIdHRwQ2FjaGVTZXJ2aWNlKSB7XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJlcyBpbnRlcmNlcHRvciBvcHRpb25zXG4gICAqIEBwYXJhbSB7e3VwZGF0ZTogYm9vbGVhbn19IG9wdGlvbnMgSWYgdXBkYXRlIG9wdGlvbiBpcyBlbmFibGVkLCBmb3JjZXMgcmVxdWVzdCB0byBiZSBtYWRlIGFuZCB1cGRhdGVzIGNhY2hlIGVudHJ5LlxuICAgKiBAcmV0dXJuIHtDYWNoZUludGVyY2VwdG9yfSBUaGUgY29uZmlndXJlZCBpbnN0YW5jZS5cbiAgICovXG4gIGNvbmZpZ3VyZShvcHRpb25zPzogeyB1cGRhdGU/OiBib29sZWFuIH0gfCBudWxsKTogQ2FjaGVJbnRlcmNlcHRvciB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgQ2FjaGVJbnRlcmNlcHRvcih0aGlzLmh0dHBDYWNoZVNlcnZpY2UpO1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudXBkYXRlKSB7XG4gICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuXG4gIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBpZiAocmVxdWVzdC5tZXRob2QgIT09ICdHRVQnKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPEh0dHBFdmVudDxhbnk+PikgPT4ge1xuICAgICAgY29uc3QgY2FjaGVkRGF0YSA9IHRoaXMuZm9yY2VVcGRhdGUgPyBudWxsIDogdGhpcy5odHRwQ2FjaGVTZXJ2aWNlLmdldENhY2hlRGF0YShyZXF1ZXN0LnVybFdpdGhQYXJhbXMpO1xuICAgICAgaWYgKGNhY2hlZERhdGEgIT09IG51bGwpIHtcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyByZXNwb25zZSB0byBhdm9pZCBzaWRlLWVmZmVjdHNcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KG5ldyBIdHRwUmVzcG9uc2UoY2FjaGVkRGF0YSBhcyBPYmplY3QpKTtcbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dC5oYW5kbGUocmVxdWVzdClcbiAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmh0dHBDYWNoZVNlcnZpY2Uuc2V0Q2FjaGVEYXRhKHJlcXVlc3QudXJsV2l0aFBhcmFtcywgZXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChldmVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3IgPT4gc3Vic2NyaWJlci5lcnJvcihlcnJvciksXG4gICAgICAgICAgICAoKSA9PiBzdWJzY3JpYmVyLmNvbXBsZXRlKClcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==