/*
 * Copyright (c) 2019 ELM. All rights reserved.
 */
import { __decorate, __extends, __metadata, __param } from "tslib";
import { Inject, Injectable, InjectionToken, Injector, Optional } from '@angular/core';
import { HttpClient, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { ErrorHandlerInterceptor } from './error-handler.interceptor';
import { CacheInterceptor } from './cache.interceptor';
import { ApiPrefixInterceptor } from './api-prefix.interceptor';
import { JwtInterceptor } from './jwt.interceptor';
import { CsrfInterceptor } from "./csrf.interceptor";
import { MockInterceptor } from "./mock.interceptor";
// From @angular/common/http/src/interceptor: allows to chain interceptors
var HttpInterceptorHandler = /** @class */ (function () {
    function HttpInterceptorHandler(next, interceptor) {
        this.next = next;
        this.interceptor = interceptor;
    }
    HttpInterceptorHandler.prototype.handle = function (request) {
        return this.interceptor.intercept(request, this.next);
    };
    return HttpInterceptorHandler;
}());
/**
 * Allows to override default dynamic interceptors that can be disabled with the HttpService extension.
 * Except for very specific needs, you should better configure these interceptors directly in the constructor below
 * for better readability.
 *
 * For static interceptors that should always be enabled (like ApiPrefixInterceptor), use the standard
 * HTTP_INTERCEPTORS token.
 */
export var HTTP_DYNAMIC_INTERCEPTORS = new InjectionToken('HTTP_DYNAMIC_INTERCEPTORS');
/**
 * Extends HttpClient with per request configuration using dynamic interceptors.
 */
var HttpService = /** @class */ (function (_super) {
    __extends(HttpService, _super);
    function HttpService(httpHandler, injector, interceptors) {
        if (interceptors === void 0) { interceptors = []; }
        var _this = _super.call(this, httpHandler) || this;
        _this.httpHandler = httpHandler;
        _this.injector = injector;
        _this.interceptors = interceptors;
        if (!_this.interceptors) {
            // Configure default interceptors that can be disabled here
            _this.interceptors = [
                _this.injector.get(ApiPrefixInterceptor),
                _this.injector.get(ErrorHandlerInterceptor),
                _this.injector.get(MockInterceptor),
                _this.injector.get(JwtInterceptor),
                _this.injector.get(CsrfInterceptor)
            ];
        }
        return _this;
    }
    HttpService_1 = HttpService;
    HttpService.prototype.cache = function (forceUpdate) {
        var cacheInterceptor = this.injector.get(CacheInterceptor).configure({ update: forceUpdate });
        return this.addInterceptor(cacheInterceptor);
    };
    HttpService.prototype.skipErrorHandler = function () {
        return this.removeInterceptor(ErrorHandlerInterceptor);
    };
    HttpService.prototype.disableApiPrefix = function () {
        return this.removeInterceptor(ApiPrefixInterceptor);
    };
    HttpService.prototype.disableDefaultMock = function () {
        return this.removeInterceptor(MockInterceptor);
    };
    HttpService.prototype.addMock = function (mockInterceptor) {
        return this.addInterceptor(mockInterceptor);
    };
    // Override the original method to wire interceptors when triggering the request.
    HttpService.prototype.request = function (method, url, options) {
        var handler = this.interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.httpHandler);
        return new HttpClient(handler).request(method, url, options);
    };
    HttpService.prototype.removeInterceptor = function (interceptorType) {
        return new HttpService_1(this.httpHandler, this.injector, this.interceptors.filter(function (i) { return !(i instanceof interceptorType); }));
    };
    HttpService.prototype.addInterceptor = function (interceptor) {
        return new HttpService_1(this.httpHandler, this.injector, this.interceptors.concat([interceptor]));
    };
    var HttpService_1;
    HttpService.ctorParameters = function () { return [
        { type: HttpHandler },
        { type: Injector },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HTTP_DYNAMIC_INTERCEPTORS,] }] }
    ]; };
    HttpService = HttpService_1 = __decorate([
        Injectable(),
        __param(2, Optional()), __param(2, Inject(HTTP_DYNAMIC_INTERCEPTORS)),
        __metadata("design:paramtypes", [HttpHandler,
            Injector, Array])
    ], HttpService);
    return HttpService;
}(HttpClient));
export { HttpService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRjYy1jb21tb25zLW5nL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2h0dHAvaHR0cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHOztBQUVILE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFHdEcsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDcEUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFpQ25ELDBFQUEwRTtBQUMxRTtJQUVFLGdDQUFvQixJQUFpQixFQUFVLFdBQTRCO1FBQXZELFNBQUksR0FBSixJQUFJLENBQWE7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBaUI7SUFDM0UsQ0FBQztJQUVELHVDQUFNLEdBQU4sVUFBTyxPQUF5QjtRQUM5QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVILDZCQUFDO0FBQUQsQ0FBQyxBQVRELElBU0M7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLElBQU0seUJBQXlCLEdBQUcsSUFBSSxjQUFj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Q0osQ0FBQzs7O2dCQTdEZ0MsV0FBVztnQkFDZCxRQUFROzRDQUN6QixRQUFRLFlBQUksTUFBTSxTQUFDLHlCQUF5Qjs7SUFKOUMsV0FBVztRQUR2QixVQUFVLEVBQUU7UUFLRSxXQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsV0FBQSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQTt5Q0FGekIsV0FBVztZQUNkLFFBQVE7T0FIM0IsV0FBVyxDQWlFdkI7SUFBRCxrQkFBQztDQUFBLEFBakVELENBQWlDLFVBQVUsR0FpRTFDO1NBakVZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IEVMTS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5pbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBDbGllbnQsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3R9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7RXJyb3JIYW5kbGVySW50ZXJjZXB0b3J9IGZyb20gJy4vZXJyb3ItaGFuZGxlci5pbnRlcmNlcHRvcic7XG5pbXBvcnQge0NhY2hlSW50ZXJjZXB0b3J9IGZyb20gJy4vY2FjaGUuaW50ZXJjZXB0b3InO1xuaW1wb3J0IHtBcGlQcmVmaXhJbnRlcmNlcHRvcn0gZnJvbSAnLi9hcGktcHJlZml4LmludGVyY2VwdG9yJztcbmltcG9ydCB7Snd0SW50ZXJjZXB0b3J9IGZyb20gJy4vand0LmludGVyY2VwdG9yJztcbmltcG9ydCB7Q3NyZkludGVyY2VwdG9yfSBmcm9tIFwiLi9jc3JmLmludGVyY2VwdG9yXCI7XG5pbXBvcnQge01vY2tJbnRlcmNlcHRvcn0gZnJvbSBcIi4vbW9jay5pbnRlcmNlcHRvclwiO1xuXG4vLyBIdHRwQ2xpZW50IGlzIGRlY2xhcmVkIGluIGEgcmUtZXhwb3J0ZWQgbW9kdWxlLCBzbyB3ZSBoYXZlIHRvIGV4dGVuZCB0aGUgb3JpZ2luYWwgbW9kdWxlIHRvIG1ha2UgaXQgd29yayBwcm9wZXJseVxuLy8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzODk3KVxuZGVjbGFyZSBtb2R1bGUgJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL2h0dHAnIHtcblxuICAvLyBBdWdtZW50IEh0dHBDbGllbnQgd2l0aCB0aGUgYWRkZWQgY29uZmlndXJhdGlvbiBtZXRob2RzIGZyb20gSHR0cFNlcnZpY2UsIHRvIGFsbG93IGluLXBsYWNlIHJlcGxhY2VtZW50IG9mXG4gIC8vIEh0dHBDbGllbnQgd2l0aCBIdHRwU2VydmljZSB1c2luZyBkZXBlbmRlbmN5IGluamVjdGlvblxuICBleHBvcnQgaW50ZXJmYWNlIEh0dHBDbGllbnQge1xuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBjYWNoaW5nIGZvciB0aGlzIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmb3JjZVVwZGF0ZSBGb3JjZXMgcmVxdWVzdCB0byBiZSBtYWRlIGFuZCB1cGRhdGVzIGNhY2hlIGVudHJ5LlxuICAgICAqIEByZXR1cm4ge0h0dHBDbGllbnR9IFRoZSBuZXcgaW5zdGFuY2UuXG4gICAgICovXG4gICAgY2FjaGUoZm9yY2VVcGRhdGU/OiBib29sZWFuKTogSHR0cENsaWVudDtcblxuICAgIC8qKlxuICAgICAqIFNraXBzIGRlZmF1bHQgZXJyb3IgaGFuZGxlciBmb3IgdGhpcyByZXF1ZXN0LlxuICAgICAqIEByZXR1cm4ge0h0dHBDbGllbnR9IFRoZSBuZXcgaW5zdGFuY2UuXG4gICAgICovXG4gICAgc2tpcEVycm9ySGFuZGxlcigpOiBIdHRwQ2xpZW50O1xuXG4gICAgLyoqXG4gICAgICogRG8gbm90IHVzZSBBUEkgcHJlZml4IGZvciB0aGlzIHJlcXVlc3QuXG4gICAgICogQHJldHVybiB7SHR0cENsaWVudH0gVGhlIG5ldyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBkaXNhYmxlQXBpUHJlZml4KCk6IEh0dHBDbGllbnQ7XG5cbiAgfVxuXG59XG5cbi8vIEZyb20gQGFuZ3VsYXIvY29tbW9uL2h0dHAvc3JjL2ludGVyY2VwdG9yOiBhbGxvd3MgdG8gY2hhaW4gaW50ZXJjZXB0b3JzXG5jbGFzcyBIdHRwSW50ZXJjZXB0b3JIYW5kbGVyIGltcGxlbWVudHMgSHR0cEhhbmRsZXIge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmV4dDogSHR0cEhhbmRsZXIsIHByaXZhdGUgaW50ZXJjZXB0b3I6IEh0dHBJbnRlcmNlcHRvcikge1xuICB9XG5cbiAgaGFuZGxlKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJjZXB0b3IuaW50ZXJjZXB0KHJlcXVlc3QsIHRoaXMubmV4dCk7XG4gIH1cblxufVxuXG4vKipcbiAqIEFsbG93cyB0byBvdmVycmlkZSBkZWZhdWx0IGR5bmFtaWMgaW50ZXJjZXB0b3JzIHRoYXQgY2FuIGJlIGRpc2FibGVkIHdpdGggdGhlIEh0dHBTZXJ2aWNlIGV4dGVuc2lvbi5cbiAqIEV4Y2VwdCBmb3IgdmVyeSBzcGVjaWZpYyBuZWVkcywgeW91IHNob3VsZCBiZXR0ZXIgY29uZmlndXJlIHRoZXNlIGludGVyY2VwdG9ycyBkaXJlY3RseSBpbiB0aGUgY29uc3RydWN0b3IgYmVsb3dcbiAqIGZvciBiZXR0ZXIgcmVhZGFiaWxpdHkuXG4gKlxuICogRm9yIHN0YXRpYyBpbnRlcmNlcHRvcnMgdGhhdCBzaG91bGQgYWx3YXlzIGJlIGVuYWJsZWQgKGxpa2UgQXBpUHJlZml4SW50ZXJjZXB0b3IpLCB1c2UgdGhlIHN0YW5kYXJkXG4gKiBIVFRQX0lOVEVSQ0VQVE9SUyB0b2tlbi5cbiAqL1xuZXhwb3J0IGNvbnN0IEhUVFBfRFlOQU1JQ19JTlRFUkNFUFRPUlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48SHR0cEludGVyY2VwdG9yPignSFRUUF9EWU5BTUlDX0lOVEVSQ0VQVE9SUycpO1xuXG4vKipcbiAqIEV4dGVuZHMgSHR0cENsaWVudCB3aXRoIHBlciByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gdXNpbmcgZHluYW1pYyBpbnRlcmNlcHRvcnMuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwU2VydmljZSBleHRlbmRzIEh0dHBDbGllbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cEhhbmRsZXI6IEh0dHBIYW5kbGVyLFxuICAgICAgICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChIVFRQX0RZTkFNSUNfSU5URVJDRVBUT1JTKSBwcml2YXRlIGludGVyY2VwdG9yczogSHR0cEludGVyY2VwdG9yW10gPSBbXSkge1xuICAgIHN1cGVyKGh0dHBIYW5kbGVyKTtcblxuICAgIGlmICghdGhpcy5pbnRlcmNlcHRvcnMpIHtcbiAgICAgIC8vIENvbmZpZ3VyZSBkZWZhdWx0IGludGVyY2VwdG9ycyB0aGF0IGNhbiBiZSBkaXNhYmxlZCBoZXJlXG4gICAgICB0aGlzLmludGVyY2VwdG9ycyA9IFtcbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoQXBpUHJlZml4SW50ZXJjZXB0b3IpLFxuICAgICAgICB0aGlzLmluamVjdG9yLmdldChFcnJvckhhbmRsZXJJbnRlcmNlcHRvciksXG4gICAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KE1vY2tJbnRlcmNlcHRvciksXG4gICAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KEp3dEludGVyY2VwdG9yKSxcbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoQ3NyZkludGVyY2VwdG9yKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICBjYWNoZShmb3JjZVVwZGF0ZT86IGJvb2xlYW4pOiBIdHRwU2VydmljZSB7XG4gICAgY29uc3QgY2FjaGVJbnRlcmNlcHRvciA9IHRoaXMuaW5qZWN0b3IuZ2V0KENhY2hlSW50ZXJjZXB0b3IpLmNvbmZpZ3VyZSh7dXBkYXRlOiBmb3JjZVVwZGF0ZX0pO1xuICAgIHJldHVybiB0aGlzLmFkZEludGVyY2VwdG9yKGNhY2hlSW50ZXJjZXB0b3IpO1xuICB9XG5cbiAgc2tpcEVycm9ySGFuZGxlcigpOiBIdHRwU2VydmljZSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlSW50ZXJjZXB0b3IoRXJyb3JIYW5kbGVySW50ZXJjZXB0b3IpO1xuICB9XG5cbiAgZGlzYWJsZUFwaVByZWZpeCgpOiBIdHRwU2VydmljZSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlSW50ZXJjZXB0b3IoQXBpUHJlZml4SW50ZXJjZXB0b3IpO1xuICB9XG5cbiAgZGlzYWJsZURlZmF1bHRNb2NrKCk6IEh0dHBTZXJ2aWNlIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVJbnRlcmNlcHRvcihNb2NrSW50ZXJjZXB0b3IpO1xuICB9XG5cbiAgYWRkTW9jayhtb2NrSW50ZXJjZXB0b3I6IEh0dHBJbnRlcmNlcHRvcik6IEh0dHBTZXJ2aWNlIHtcbiAgICByZXR1cm4gdGhpcy5hZGRJbnRlcmNlcHRvcihtb2NrSW50ZXJjZXB0b3IpO1xuICB9XG5cbiAgLy8gT3ZlcnJpZGUgdGhlIG9yaWdpbmFsIG1ldGhvZCB0byB3aXJlIGludGVyY2VwdG9ycyB3aGVuIHRyaWdnZXJpbmcgdGhlIHJlcXVlc3QuXG4gIHJlcXVlc3QobWV0aG9kPzogYW55LCB1cmw/OiBhbnksIG9wdGlvbnM/OiBhbnkpOiBhbnkge1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmludGVyY2VwdG9ycy5yZWR1Y2VSaWdodChcbiAgICAgIChuZXh0LCBpbnRlcmNlcHRvcikgPT4gbmV3IEh0dHBJbnRlcmNlcHRvckhhbmRsZXIobmV4dCwgaW50ZXJjZXB0b3IpLFxuICAgICAgdGhpcy5odHRwSGFuZGxlclxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBIdHRwQ2xpZW50KGhhbmRsZXIpLnJlcXVlc3QobWV0aG9kLCB1cmwsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVJbnRlcmNlcHRvcihpbnRlcmNlcHRvclR5cGU6IEZ1bmN0aW9uKTogSHR0cFNlcnZpY2Uge1xuICAgIHJldHVybiBuZXcgSHR0cFNlcnZpY2UoXG4gICAgICB0aGlzLmh0dHBIYW5kbGVyLFxuICAgICAgdGhpcy5pbmplY3RvcixcbiAgICAgIHRoaXMuaW50ZXJjZXB0b3JzLmZpbHRlcihpID0+ICEoaSBpbnN0YW5jZW9mIGludGVyY2VwdG9yVHlwZSkpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkSW50ZXJjZXB0b3IoaW50ZXJjZXB0b3I6IEh0dHBJbnRlcmNlcHRvcik6IEh0dHBTZXJ2aWNlIHtcbiAgICByZXR1cm4gbmV3IEh0dHBTZXJ2aWNlKFxuICAgICAgdGhpcy5odHRwSGFuZGxlcixcbiAgICAgIHRoaXMuaW5qZWN0b3IsXG4gICAgICB0aGlzLmludGVyY2VwdG9ycy5jb25jYXQoW2ludGVyY2VwdG9yXSlcbiAgICApO1xuICB9XG5cbn1cbiJdfQ==