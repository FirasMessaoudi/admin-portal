import { __decorate, __metadata, __param, __values } from "tslib";
import { Inject, Injectable } from '@angular/core';
/**
 * Prefixes all requests with `environment.backendMappings`.
 */
var ApiPrefixInterceptor = /** @class */ (function () {
    function ApiPrefixInterceptor(environment) {
        this.environment = environment;
    }
    ApiPrefixInterceptor.prototype.intercept = function (request, next) {
        var e_1, _a;
        if (this.environment.production || !this.environment.dev) {
            var backendUrlMappings = this.environment.backendMappings;
            var requestUrl = void 0, serverUrl = void 0;
            try {
                for (var backendUrlMappings_1 = __values(backendUrlMappings), backendUrlMappings_1_1 = backendUrlMappings_1.next(); !backendUrlMappings_1_1.done; backendUrlMappings_1_1 = backendUrlMappings_1.next()) {
                    var urlMapping = backendUrlMappings_1_1.value;
                    if (request.url.startsWith(urlMapping.mapping)) {
                        serverUrl = urlMapping.url;
                        if (serverUrl.endsWith('/')) {
                            serverUrl = serverUrl.substring(0, serverUrl.length - 1);
                        }
                        requestUrl = request.url.replace(urlMapping.mapping, serverUrl);
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (backendUrlMappings_1_1 && !backendUrlMappings_1_1.done && (_a = backendUrlMappings_1.return)) _a.call(backendUrlMappings_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            request = request.clone({ url: requestUrl });
        }
        return next.handle(request);
    };
    ApiPrefixInterceptor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['environment',] }] }
    ]; };
    ApiPrefixInterceptor = __decorate([
        Injectable(),
        __param(0, Inject('environment')),
        __metadata("design:paramtypes", [Object])
    ], ApiPrefixInterceptor);
    return ApiPrefixInterceptor;
}());
export { ApiPrefixInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXByZWZpeC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkY2MtY29tbW9ucy1uZy9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9odHRwL2FwaS1wcmVmaXguaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBSWpEOztHQUVHO0FBRUg7SUFJRSw4QkFBbUMsV0FBZ0I7UUFDakQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7SUFDaEMsQ0FBQztJQUVELHdDQUFTLEdBQVQsVUFBVSxPQUF5QixFQUFFLElBQWlCOztRQUNwRCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDeEQsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQztZQUMxRCxJQUFJLFVBQVUsU0FBQSxFQUFFLFNBQVMsU0FBUSxDQUFDOztnQkFDbEMsS0FBdUIsSUFBQSx1QkFBQSxTQUFBLGtCQUFrQixDQUFBLHNEQUFBLHNGQUFFO29CQUF0QyxJQUFJLFVBQVUsK0JBQUE7b0JBQ2pCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO3dCQUM5QyxTQUFTLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQzt3QkFDM0IsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFOzRCQUMzQixTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQzt5QkFDMUQ7d0JBQ0QsVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7d0JBQ2hFLE1BQU07cUJBQ1A7aUJBQ0Y7Ozs7Ozs7OztZQUNELE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUMsR0FBRyxFQUFFLFVBQVUsRUFBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Z0RBckJZLE1BQU0sU0FBQyxhQUFhOztJQUp0QixvQkFBb0I7UUFEaEMsVUFBVSxFQUFFO1FBS0UsV0FBQSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7O09BSnZCLG9CQUFvQixDQTBCaEM7SUFBRCwyQkFBQztDQUFBLEFBMUJELElBMEJDO1NBMUJZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBQcmVmaXhlcyBhbGwgcmVxdWVzdHMgd2l0aCBgZW52aXJvbm1lbnQuYmFja2VuZE1hcHBpbmdzYC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwaVByZWZpeEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICBwcml2YXRlIGVudmlyb25tZW50OiBhbnk7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdCgnZW52aXJvbm1lbnQnKSBlbnZpcm9ubWVudDogYW55KSB7XG4gICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50XG4gIH1cblxuICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgaWYgKHRoaXMuZW52aXJvbm1lbnQucHJvZHVjdGlvbiB8fCAhdGhpcy5lbnZpcm9ubWVudC5kZXYpIHtcbiAgICAgIGxldCBiYWNrZW5kVXJsTWFwcGluZ3MgPSB0aGlzLmVudmlyb25tZW50LmJhY2tlbmRNYXBwaW5ncztcbiAgICAgIGxldCByZXF1ZXN0VXJsLCBzZXJ2ZXJVcmw6IHN0cmluZztcbiAgICAgIGZvciAobGV0IHVybE1hcHBpbmcgb2YgYmFja2VuZFVybE1hcHBpbmdzKSB7XG4gICAgICAgIGlmIChyZXF1ZXN0LnVybC5zdGFydHNXaXRoKHVybE1hcHBpbmcubWFwcGluZykpIHtcbiAgICAgICAgICBzZXJ2ZXJVcmwgPSB1cmxNYXBwaW5nLnVybDtcbiAgICAgICAgICBpZiAoc2VydmVyVXJsLmVuZHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgIHNlcnZlclVybCA9IHNlcnZlclVybC5zdWJzdHJpbmcoMCwgc2VydmVyVXJsLmxlbmd0aCAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXF1ZXN0VXJsID0gcmVxdWVzdC51cmwucmVwbGFjZSh1cmxNYXBwaW5nLm1hcHBpbmcsIHNlcnZlclVybCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlcXVlc3QgPSByZXF1ZXN0LmNsb25lKHt1cmw6IHJlcXVlc3RVcmx9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICB9XG59XG4iXX0=