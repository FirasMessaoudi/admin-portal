import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest, HttpXsrfTokenExtractor } from '@angular/common/http';
import { CookieService } from "ngx-cookie-service";
import { Router } from "@angular/router";
var CSRF_HEADER_NAME = 'X-XSRF-TOKEN';
var CsrfInterceptor = /** @class */ (function () {
    function CsrfInterceptor(cookieService, router, tokenExtractor) {
        this.cookieService = cookieService;
        this.router = router;
        this.tokenExtractor = tokenExtractor;
    }
    CsrfInterceptor.prototype.intercept = function (request, next) {
        var token = this.tokenExtractor.getToken();
        // add authorization header with jwt token if available
        var headers = request.headers;
        if (token != null && request.headers.get(CSRF_HEADER_NAME) == null && request.method == 'POST') {
            headers = request.headers.append(CSRF_HEADER_NAME, token);
        }
        request = request.clone({ headers: headers });
        return next.handle(request);
    };
    CsrfInterceptor.ctorParameters = function () { return [
        { type: CookieService },
        { type: Router },
        { type: HttpXsrfTokenExtractor }
    ]; };
    CsrfInterceptor = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [CookieService, Router, HttpXsrfTokenExtractor])
    ], CsrfInterceptor);
    return CsrfInterceptor;
}());
export { CsrfInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NyZi5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkY2MtY29tbW9ucy1uZy9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9odHRwL2NzcmYuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsV0FBVyxFQUNYLGVBQWUsRUFDZixXQUFXLEVBQ1gsc0JBQXNCLEVBQ3ZCLE1BQU0sc0JBQXNCLENBQUM7QUFFOUIsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUV2QyxJQUFNLGdCQUFnQixHQUFHLGNBQWMsQ0FBQztBQUd4QztJQUdFLHlCQUFvQixhQUE0QixFQUFVLE1BQWMsRUFBVSxjQUFzQztRQUFwRyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBd0I7SUFDeEgsQ0FBQztJQUVELG1DQUFTLEdBQVQsVUFBVSxPQUF5QixFQUFFLElBQWlCO1FBRXBELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFZLENBQUM7UUFFdkQsdURBQXVEO1FBQ3ZELElBQUksT0FBTyxHQUFnQixPQUFPLENBQUMsT0FBTyxDQUFDO1FBQzNDLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLE1BQU0sRUFBRTtZQUM5RixPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sU0FBQSxFQUFDLENBQUMsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Z0JBZGtDLGFBQWE7Z0JBQWtCLE1BQU07Z0JBQTBCLHNCQUFzQjs7SUFIN0csZUFBZTtRQUQzQixVQUFVLEVBQUU7eUNBSXdCLGFBQWEsRUFBa0IsTUFBTSxFQUEwQixzQkFBc0I7T0FIN0csZUFBZSxDQW1CM0I7SUFBRCxzQkFBQztDQUFBLEFBbkJELElBbUJDO1NBbkJZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgSHR0cEV2ZW50LFxuICBIdHRwSGFuZGxlcixcbiAgSHR0cEhlYWRlcnMsXG4gIEh0dHBJbnRlcmNlcHRvcixcbiAgSHR0cFJlcXVlc3QsXG4gIEh0dHBYc3JmVG9rZW5FeHRyYWN0b3Jcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7Q29va2llU2VydmljZX0gZnJvbSBcIm5neC1jb29raWUtc2VydmljZVwiO1xuaW1wb3J0IHtSb3V0ZXJ9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcblxuY29uc3QgQ1NSRl9IRUFERVJfTkFNRSA9ICdYLVhTUkYtVE9LRU4nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ3NyZkludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29va2llU2VydmljZTogQ29va2llU2VydmljZSwgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlciwgcHJpdmF0ZSB0b2tlbkV4dHJhY3RvcjogSHR0cFhzcmZUb2tlbkV4dHJhY3Rvcikge1xuICB9XG5cbiAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuXG4gICAgY29uc3QgdG9rZW4gPSB0aGlzLnRva2VuRXh0cmFjdG9yLmdldFRva2VuKCkgYXMgc3RyaW5nO1xuXG4gICAgLy8gYWRkIGF1dGhvcml6YXRpb24gaGVhZGVyIHdpdGggand0IHRva2VuIGlmIGF2YWlsYWJsZVxuICAgIGxldCBoZWFkZXJzOiBIdHRwSGVhZGVycyA9IHJlcXVlc3QuaGVhZGVycztcbiAgICBpZiAodG9rZW4gIT0gbnVsbCAmJiByZXF1ZXN0LmhlYWRlcnMuZ2V0KENTUkZfSEVBREVSX05BTUUpID09IG51bGwgJiYgcmVxdWVzdC5tZXRob2QgPT0gJ1BPU1QnKSB7XG4gICAgICBoZWFkZXJzID0gcmVxdWVzdC5oZWFkZXJzLmFwcGVuZChDU1JGX0hFQURFUl9OQU1FLCB0b2tlbik7XG4gICAgfVxuICAgIHJlcXVlc3QgPSByZXF1ZXN0LmNsb25lKHtoZWFkZXJzfSk7XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICB9XG5cbn1cbiJdfQ==