/*
 * Copyright (c) 2019 ELM. All rights reserved.
 */
import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { timer } from 'rxjs';
import { map } from 'rxjs/operators';
import { CookieService } from "ngx-cookie-service";
import { Router } from "@angular/router";
import { Logger } from "../logging";
var TOKEN_EXPIRY_COOKIE_NAME = 'X-SEC-TK-EXP';
var TOKEN_COOKIE_NAME = 'X-SEC-TK';
var CONTENT_TYPE_HEADER_NAME = 'Content-Type';
var USER_STORAGE_ITEM_KEY = 'currentUser';
var log = new Logger('Login');
export var PUBLIC_URL_PATTERNS = 'PUBLIC_URL_PATTERNS';
export var LOGIN_URL = 'LOGIN_URL';
var JwtInterceptor = /** @class */ (function () {
    function JwtInterceptor(cookieService, router, environment, publicUrlPatterns, loginUrl) {
        if (publicUrlPatterns === void 0) { publicUrlPatterns = []; }
        if (loginUrl === void 0) { loginUrl = '/login.html'; }
        this.cookieService = cookieService;
        this.router = router;
        this.environment = environment;
        this.publicUrlPatterns = publicUrlPatterns;
        this.loginUrl = loginUrl;
        this.tokenExpiryDateTimerSubscription = null;
    }
    JwtInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        var headers = request.headers;
        if (request.headers.get(CONTENT_TYPE_HEADER_NAME) == null) {
            headers = request.headers.append(CONTENT_TYPE_HEADER_NAME, 'application/json');
        }
        else if (request.headers.get(CONTENT_TYPE_HEADER_NAME).startsWith("multipart/form-data")) {
            headers = request.headers.delete(CONTENT_TYPE_HEADER_NAME);
        }
        var currentUser = JSON.parse(localStorage.getItem(USER_STORAGE_ITEM_KEY));
        if (currentUser && this.tokenExpiryDateTimerSubscription == null) {
            this.refreshTokenTimer();
        }
        request = request.clone({ headers: headers });
        var started = Date.now();
        return next.handle(request).pipe(map(function (event) {
            if (event instanceof HttpResponse) {
                if (!_this.environment.production) {
                    var elapsed = Date.now() - started;
                    console.log("Request for " + request.urlWithParams + " took " + elapsed + " ms.");
                }
                if (_this.cookieService.get(TOKEN_EXPIRY_COOKIE_NAME)) {
                    console.log("found " + TOKEN_EXPIRY_COOKIE_NAME + " with value [" + _this.cookieService.get(TOKEN_EXPIRY_COOKIE_NAME) + "]");
                    if (_this.tokenExpiryDateTimerSubscription) {
                        _this.tokenExpiryDateTimerSubscription.unsubscribe();
                        _this.refreshTokenTimer();
                    }
                }
            }
            return event;
        }));
    };
    JwtInterceptor.prototype.refreshTokenTimer = function () {
        var _this = this;
        var isPublicUrl = false;
        this.publicUrlPatterns.forEach(function (urlPattern) {
            isPublicUrl = isPublicUrl || _this.router.url.startsWith(urlPattern);
        });
        if (isPublicUrl && !this.router.url.startsWith(this.loginUrl)) {
            // do nothing
            log.debug('skipping public url...');
            return;
        }
        log.debug('secured url, setting timer...');
        var tokenExpiry = this.cookieService.get(TOKEN_EXPIRY_COOKIE_NAME);
        this.tokenExpiryDateTimerSubscription = timer(tokenExpiry).subscribe(function () {
            localStorage.removeItem(USER_STORAGE_ITEM_KEY);
            _this.cookieService.delete(TOKEN_EXPIRY_COOKIE_NAME);
            _this.cookieService.delete(TOKEN_COOKIE_NAME);
            _this.router.navigate([_this.loginUrl], { replaceUrl: true });
        });
    };
    JwtInterceptor.ctorParameters = function () { return [
        { type: CookieService },
        { type: Router },
        { type: undefined, decorators: [{ type: Inject, args: ['environment',] }] },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [PUBLIC_URL_PATTERNS,] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOGIN_URL,] }] }
    ]; };
    JwtInterceptor = __decorate([
        Injectable(),
        __param(2, Inject('environment')),
        __param(3, Optional()), __param(3, Inject(PUBLIC_URL_PATTERNS)),
        __param(4, Optional()), __param(4, Inject(LOGIN_URL)),
        __metadata("design:paramtypes", [CookieService, Router, Object, Array, String])
    ], JwtInterceptor);
    return JwtInterceptor;
}());
export { JwtInterceptor };
//# sourceMappingURL=data:application/json;base64,