/*
 * Copyright (c) 2019 ELM. All rights reserved.
 */
import { animate, animateChild, group, query, sequence, style, transition, trigger } from '@angular/animations';
export var RouteAnimations = trigger('routerAnimations', [
    transition('* <=> *', [
        // css styles at start of transition
        //style({ opacity: 0 }),
        // animation and styles at end of transition
        //animate('0.5s', style({ opacity: 1 }))
        query(':enter, :leave', style({ position: 'fixed', width: '100%' }), { optional: true }),
        query(':enter', style({ transform: 'translateX(100%)' }), { optional: true }),
        sequence([
            query(':leave', animateChild(), { optional: true }),
            group([
                query(':leave', [
                    style({ transform: 'translateX(0%)' }),
                    animate('500ms cubic-bezier(.75,-0.48,.26,1.52)', style({ transform: 'translateX(-100%)' }))
                ], { optional: true }),
                query(':enter', [
                    style({ transform: 'translateX(100%)' }),
                    animate('500ms cubic-bezier(.75,-0.48,.26,1.52)', style({ transform: 'translateX(0%)' }))
                ], { optional: true }),
            ]),
            query(':enter', animateChild(), { optional: true }),
        ])
    ])
]);
/**
 * Provides helper methods to create routes.
 */
var Route = /** @class */ (function () {
    function Route() {
    }
    /**
     * Creates routes using the shell component and authentication.
     * @param routes The routes to add.
     * @return {Route} The new route using shell as the base.
     */
    Route.withShell = function (routes, appLayout, authGuard) {
        return {
            path: '',
            component: appLayout,
            children: routes,
            canActivate: [authGuard],
            // Reuse ShellComponent instance when navigating between child views
            data: { reuse: true }
        };
    };
    return Route;
}());
export { Route };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkY2MtY29tbW9ucy1uZy9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9yb3V0ZS9yb3V0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBR0gsT0FBTyxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUU5RyxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0lBQ3pELFVBQVUsQ0FBQyxTQUFTLEVBQUU7UUFFcEIsb0NBQW9DO1FBQ3BDLHdCQUF3QjtRQUV4Qiw0Q0FBNEM7UUFDNUMsd0NBQXdDO1FBRXhDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDO1FBQ3BGLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLGtCQUFrQixFQUFDLENBQUMsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztRQUV6RSxRQUFRLENBQUM7WUFDUCxLQUFLLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDO1lBQ2pELEtBQUssQ0FBQztnQkFDSixLQUFLLENBQUMsUUFBUSxFQUFFO29CQUNkLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSxnQkFBZ0IsRUFBQyxDQUFDO29CQUNwQyxPQUFPLENBQUMsd0NBQXdDLEVBQzlDLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSxtQkFBbUIsRUFBQyxDQUFDLENBQ3hDO2lCQUNGLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUM7Z0JBQ3BCLEtBQUssQ0FBQyxRQUFRLEVBQUU7b0JBQ2QsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLGtCQUFrQixFQUFDLENBQUM7b0JBQ3RDLE9BQU8sQ0FBQyx3Q0FBd0MsRUFDOUMsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLGdCQUFnQixFQUFDLENBQUMsQ0FDckM7aUJBQ0YsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQzthQUNyQixDQUFDO1lBRUYsS0FBSyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztTQUVsRCxDQUFDO0tBQ0gsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVIOztHQUVHO0FBQ0g7SUFBQTtJQWtCQSxDQUFDO0lBaEJDOzs7O09BSUc7SUFDSSxlQUFTLEdBQWhCLFVBQWlCLE1BQWMsRUFBRSxTQUFjLEVBQUUsU0FBYztRQUM3RCxPQUFPO1lBQ0wsSUFBSSxFQUFFLEVBQUU7WUFDUixTQUFTLEVBQUUsU0FBUztZQUNwQixRQUFRLEVBQUUsTUFBTTtZQUNoQixXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDeEIsb0VBQW9FO1lBQ3BFLElBQUksRUFBRSxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUM7U0FDcEIsQ0FBQztJQUNKLENBQUM7SUFFSCxZQUFDO0FBQUQsQ0FBQyxBQWxCRCxJQWtCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgRUxNLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbmltcG9ydCB7Um91dGUgYXMgbmdSb3V0ZSwgUm91dGVzfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHthbmltYXRlLCBhbmltYXRlQ2hpbGQsIGdyb3VwLCBxdWVyeSwgc2VxdWVuY2UsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuZXhwb3J0IGNvbnN0IFJvdXRlQW5pbWF0aW9ucyA9IHRyaWdnZXIoJ3JvdXRlckFuaW1hdGlvbnMnLCBbXG4gIHRyYW5zaXRpb24oJyogPD0+IConLCBbXG5cbiAgICAvLyBjc3Mgc3R5bGVzIGF0IHN0YXJ0IG9mIHRyYW5zaXRpb25cbiAgICAvL3N0eWxlKHsgb3BhY2l0eTogMCB9KSxcblxuICAgIC8vIGFuaW1hdGlvbiBhbmQgc3R5bGVzIGF0IGVuZCBvZiB0cmFuc2l0aW9uXG4gICAgLy9hbmltYXRlKCcwLjVzJywgc3R5bGUoeyBvcGFjaXR5OiAxIH0pKVxuXG4gICAgcXVlcnkoJzplbnRlciwgOmxlYXZlJywgc3R5bGUoe3Bvc2l0aW9uOiAnZml4ZWQnLCB3aWR0aDogJzEwMCUnfSksIHtvcHRpb25hbDogdHJ1ZX0pLFxuICAgIHF1ZXJ5KCc6ZW50ZXInLCBzdHlsZSh7dHJhbnNmb3JtOiAndHJhbnNsYXRlWCgxMDAlKSd9KSwge29wdGlvbmFsOiB0cnVlfSksXG5cbiAgICBzZXF1ZW5jZShbXG4gICAgICBxdWVyeSgnOmxlYXZlJywgYW5pbWF0ZUNoaWxkKCksIHtvcHRpb25hbDogdHJ1ZX0pLFxuICAgICAgZ3JvdXAoW1xuICAgICAgICBxdWVyeSgnOmxlYXZlJywgW1xuICAgICAgICAgIHN0eWxlKHt0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDAlKSd9KSxcbiAgICAgICAgICBhbmltYXRlKCc1MDBtcyBjdWJpYy1iZXppZXIoLjc1LC0wLjQ4LC4yNiwxLjUyKScsXG4gICAgICAgICAgICBzdHlsZSh7dHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtMTAwJSknfSlcbiAgICAgICAgICApXG4gICAgICAgIF0sIHtvcHRpb25hbDogdHJ1ZX0pLFxuICAgICAgICBxdWVyeSgnOmVudGVyJywgW1xuICAgICAgICAgIHN0eWxlKHt0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDEwMCUpJ30pLFxuICAgICAgICAgIGFuaW1hdGUoJzUwMG1zIGN1YmljLWJlemllciguNzUsLTAuNDgsLjI2LDEuNTIpJyxcbiAgICAgICAgICAgIHN0eWxlKHt0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDAlKSd9KVxuICAgICAgICAgIClcbiAgICAgICAgXSwge29wdGlvbmFsOiB0cnVlfSksXG4gICAgICBdKSxcblxuICAgICAgcXVlcnkoJzplbnRlcicsIGFuaW1hdGVDaGlsZCgpLCB7b3B0aW9uYWw6IHRydWV9KSxcblxuICAgIF0pXG4gIF0pXG5dKTtcblxuLyoqXG4gKiBQcm92aWRlcyBoZWxwZXIgbWV0aG9kcyB0byBjcmVhdGUgcm91dGVzLlxuICovXG5leHBvcnQgY2xhc3MgUm91dGUge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHJvdXRlcyB1c2luZyB0aGUgc2hlbGwgY29tcG9uZW50IGFuZCBhdXRoZW50aWNhdGlvbi5cbiAgICogQHBhcmFtIHJvdXRlcyBUaGUgcm91dGVzIHRvIGFkZC5cbiAgICogQHJldHVybiB7Um91dGV9IFRoZSBuZXcgcm91dGUgdXNpbmcgc2hlbGwgYXMgdGhlIGJhc2UuXG4gICAqL1xuICBzdGF0aWMgd2l0aFNoZWxsKHJvdXRlczogUm91dGVzLCBhcHBMYXlvdXQ6IGFueSwgYXV0aEd1YXJkOiBhbnkpOiBuZ1JvdXRlIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogJycsXG4gICAgICBjb21wb25lbnQ6IGFwcExheW91dCxcbiAgICAgIGNoaWxkcmVuOiByb3V0ZXMsXG4gICAgICBjYW5BY3RpdmF0ZTogW2F1dGhHdWFyZF0sXG4gICAgICAvLyBSZXVzZSBTaGVsbENvbXBvbmVudCBpbnN0YW5jZSB3aGVuIG5hdmlnYXRpbmcgYmV0d2VlbiBjaGlsZCB2aWV3c1xuICAgICAgZGF0YToge3JldXNlOiB0cnVlfVxuICAgIH07XG4gIH1cblxufVxuIl19