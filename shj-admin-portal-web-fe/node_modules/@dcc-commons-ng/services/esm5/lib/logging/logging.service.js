/**
 * Simple logger system with the possibility of registering custom outputs.
 *
 * 4 different log levels are provided, with corresponding methods:
 * - debug   : for debug information
 * - info    : for informative status of the application (success, ...)
 * - warning : for non-critical errors that do not prevent normal application behavior
 * - error   : for critical errors that prevent normal application behavior
 *
 * Example usage:
 * ```
 * import { Logger } from 'app/core/logger.service';
 *
 * const log = new Logger('myFile');
 * ...
 * log.debug('something happened');
 * ```
 *
 * To disable debug and info logs in production, add this snippet to your root component:
 * ```
 * export class AppComponent implements OnInit {
 *   ngOnInit() {
 *     if (environment.production) {
 *       Logger.enableProductionMode();
 *     }
 *     ...
 *   }
 * }
 *
 * If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.
 */
/**
 * The possible log levels.
 * LogLevel.Off is never emitted and only used with Logger.level property to disable logs.
 */
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Off"] = 0] = "Off";
    LogLevel[LogLevel["Error"] = 1] = "Error";
    LogLevel[LogLevel["Warning"] = 2] = "Warning";
    LogLevel[LogLevel["Info"] = 3] = "Info";
    LogLevel[LogLevel["Debug"] = 4] = "Debug";
})(LogLevel || (LogLevel = {}));
var Logger = /** @class */ (function () {
    function Logger(source) {
        this.source = source;
    }
    /**
     * Enables production mode.
     * Sets logging level to LogLevel.Warning.
     */
    Logger.enableProductionMode = function () {
        Logger.level = LogLevel.Warning;
    };
    /**
     * Logs messages or objects  with the debug level.
     * Works the same as console.log().
     */
    Logger.prototype.debug = function () {
        var objects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objects[_i] = arguments[_i];
        }
        this.log(console.log, LogLevel.Debug, objects);
    };
    /**
     * Logs messages or objects  with the info level.
     * Works the same as console.log().
     */
    Logger.prototype.info = function () {
        var objects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objects[_i] = arguments[_i];
        }
        this.log(console.info, LogLevel.Info, objects);
    };
    /**
     * Logs messages or objects  with the warning level.
     * Works the same as console.log().
     */
    Logger.prototype.warn = function () {
        var objects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objects[_i] = arguments[_i];
        }
        this.log(console.warn, LogLevel.Warning, objects);
    };
    /**
     * Logs messages or objects  with the error level.
     * Works the same as console.log().
     */
    Logger.prototype.error = function () {
        var objects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objects[_i] = arguments[_i];
        }
        this.log(console.error, LogLevel.Error, objects);
    };
    Logger.prototype.log = function (func, level, objects) {
        var _this = this;
        if (level <= Logger.level) {
            var log = this.source ? ['[' + this.source + ']'].concat(objects) : objects;
            func.apply(console, log);
            Logger.outputs.forEach(function (output) { return output.apply(output, [_this.source, level].concat(objects)); });
        }
    };
    /**
     * Current logging level.
     * Set it to LogLevel.Off to disable logs completely.
     */
    Logger.level = LogLevel.Debug;
    /**
     * Additional log outputs.
     */
    Logger.outputs = [];
    return Logger;
}());
export { Logger };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRjYy1jb21tb25zLW5nL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2xvZ2dpbmcvbG9nZ2luZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4Qkc7QUFFSDs7O0dBR0c7QUFDSCxNQUFNLENBQU4sSUFBWSxRQU1YO0FBTkQsV0FBWSxRQUFRO0lBQ2xCLHFDQUFPLENBQUE7SUFDUCx5Q0FBSyxDQUFBO0lBQ0wsNkNBQU8sQ0FBQTtJQUNQLHVDQUFJLENBQUE7SUFDSix5Q0FBSyxDQUFBO0FBQ1AsQ0FBQyxFQU5XLFFBQVEsS0FBUixRQUFRLFFBTW5CO0FBT0Q7SUFhRSxnQkFBb0IsTUFBZTtRQUFmLFdBQU0sR0FBTixNQUFNLENBQVM7SUFDbkMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLDJCQUFvQixHQUEzQjtRQUNFLE1BQU0sQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUNsQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsc0JBQUssR0FBTDtRQUFNLGlCQUFpQjthQUFqQixVQUFpQixFQUFqQixxQkFBaUIsRUFBakIsSUFBaUI7WUFBakIsNEJBQWlCOztRQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gscUJBQUksR0FBSjtRQUFLLGlCQUFpQjthQUFqQixVQUFpQixFQUFqQixxQkFBaUIsRUFBakIsSUFBaUI7WUFBakIsNEJBQWlCOztRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gscUJBQUksR0FBSjtRQUFLLGlCQUFpQjthQUFqQixVQUFpQixFQUFqQixxQkFBaUIsRUFBakIsSUFBaUI7WUFBakIsNEJBQWlCOztRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsc0JBQUssR0FBTDtRQUFNLGlCQUFpQjthQUFqQixVQUFpQixFQUFqQixxQkFBaUIsRUFBakIsSUFBaUI7WUFBakIsNEJBQWlCOztRQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU8sb0JBQUcsR0FBWCxVQUFZLElBQWMsRUFBRSxLQUFlLEVBQUUsT0FBYztRQUEzRCxpQkFNQztRQUxDLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDekIsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUM5RSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFDLE1BQU0sSUFBSyxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBMUQsQ0FBMEQsQ0FBQyxDQUFDO1NBQ2hHO0lBQ0gsQ0FBQztJQTVERDs7O09BR0c7SUFDSSxZQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUU5Qjs7T0FFRztJQUNJLGNBQU8sR0FBZ0IsRUFBRSxDQUFDO0lBcURuQyxhQUFDO0NBQUEsQUFoRUQsSUFnRUM7U0FoRVksTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2ltcGxlIGxvZ2dlciBzeXN0ZW0gd2l0aCB0aGUgcG9zc2liaWxpdHkgb2YgcmVnaXN0ZXJpbmcgY3VzdG9tIG91dHB1dHMuXG4gKlxuICogNCBkaWZmZXJlbnQgbG9nIGxldmVscyBhcmUgcHJvdmlkZWQsIHdpdGggY29ycmVzcG9uZGluZyBtZXRob2RzOlxuICogLSBkZWJ1ZyAgIDogZm9yIGRlYnVnIGluZm9ybWF0aW9uXG4gKiAtIGluZm8gICAgOiBmb3IgaW5mb3JtYXRpdmUgc3RhdHVzIG9mIHRoZSBhcHBsaWNhdGlvbiAoc3VjY2VzcywgLi4uKVxuICogLSB3YXJuaW5nIDogZm9yIG5vbi1jcml0aWNhbCBlcnJvcnMgdGhhdCBkbyBub3QgcHJldmVudCBub3JtYWwgYXBwbGljYXRpb24gYmVoYXZpb3JcbiAqIC0gZXJyb3IgICA6IGZvciBjcml0aWNhbCBlcnJvcnMgdGhhdCBwcmV2ZW50IG5vcm1hbCBhcHBsaWNhdGlvbiBiZWhhdmlvclxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiBgYGBcbiAqIGltcG9ydCB7IExvZ2dlciB9IGZyb20gJ2FwcC9jb3JlL2xvZ2dlci5zZXJ2aWNlJztcbiAqXG4gKiBjb25zdCBsb2cgPSBuZXcgTG9nZ2VyKCdteUZpbGUnKTtcbiAqIC4uLlxuICogbG9nLmRlYnVnKCdzb21ldGhpbmcgaGFwcGVuZWQnKTtcbiAqIGBgYFxuICpcbiAqIFRvIGRpc2FibGUgZGVidWcgYW5kIGluZm8gbG9ncyBpbiBwcm9kdWN0aW9uLCBhZGQgdGhpcyBzbmlwcGV0IHRvIHlvdXIgcm9vdCBjb21wb25lbnQ6XG4gKiBgYGBcbiAqIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICogICBuZ09uSW5pdCgpIHtcbiAqICAgICBpZiAoZW52aXJvbm1lbnQucHJvZHVjdGlvbikge1xuICogICAgICAgTG9nZ2VyLmVuYWJsZVByb2R1Y3Rpb25Nb2RlKCk7XG4gKiAgICAgfVxuICogICAgIC4uLlxuICogICB9XG4gKiB9XG4gKlxuICogSWYgeW91IHdhbnQgdG8gcHJvY2VzcyBsb2dzIHRocm91Z2ggb3RoZXIgb3V0cHV0cyB0aGFuIGNvbnNvbGUsIHlvdSBjYW4gYWRkIExvZ091dHB1dCBmdW5jdGlvbnMgdG8gTG9nZ2VyLm91dHB1dHMuXG4gKi9cblxuLyoqXG4gKiBUaGUgcG9zc2libGUgbG9nIGxldmVscy5cbiAqIExvZ0xldmVsLk9mZiBpcyBuZXZlciBlbWl0dGVkIGFuZCBvbmx5IHVzZWQgd2l0aCBMb2dnZXIubGV2ZWwgcHJvcGVydHkgdG8gZGlzYWJsZSBsb2dzLlxuICovXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIE9mZiA9IDAsXG4gIEVycm9yLFxuICBXYXJuaW5nLFxuICBJbmZvLFxuICBEZWJ1Z1xufVxuXG4vKipcbiAqIExvZyBvdXRwdXQgaGFuZGxlciBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IHR5cGUgTG9nT3V0cHV0ID0gKHNvdXJjZTogc3RyaW5nLCBsZXZlbDogTG9nTGV2ZWwsIC4uLm9iamVjdHM6IGFueVtdKSA9PiB2b2lkO1xuXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcblxuICAvKipcbiAgICogQ3VycmVudCBsb2dnaW5nIGxldmVsLlxuICAgKiBTZXQgaXQgdG8gTG9nTGV2ZWwuT2ZmIHRvIGRpc2FibGUgbG9ncyBjb21wbGV0ZWx5LlxuICAgKi9cbiAgc3RhdGljIGxldmVsID0gTG9nTGV2ZWwuRGVidWc7XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgbG9nIG91dHB1dHMuXG4gICAqL1xuICBzdGF0aWMgb3V0cHV0czogTG9nT3V0cHV0W10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNvdXJjZT86IHN0cmluZykge1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgcHJvZHVjdGlvbiBtb2RlLlxuICAgKiBTZXRzIGxvZ2dpbmcgbGV2ZWwgdG8gTG9nTGV2ZWwuV2FybmluZy5cbiAgICovXG4gIHN0YXRpYyBlbmFibGVQcm9kdWN0aW9uTW9kZSgpIHtcbiAgICBMb2dnZXIubGV2ZWwgPSBMb2dMZXZlbC5XYXJuaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ3MgbWVzc2FnZXMgb3Igb2JqZWN0cyAgd2l0aCB0aGUgZGVidWcgbGV2ZWwuXG4gICAqIFdvcmtzIHRoZSBzYW1lIGFzIGNvbnNvbGUubG9nKCkuXG4gICAqL1xuICBkZWJ1ZyguLi5vYmplY3RzOiBhbnlbXSkge1xuICAgIHRoaXMubG9nKGNvbnNvbGUubG9nLCBMb2dMZXZlbC5EZWJ1Zywgb2JqZWN0cyk7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBtZXNzYWdlcyBvciBvYmplY3RzICB3aXRoIHRoZSBpbmZvIGxldmVsLlxuICAgKiBXb3JrcyB0aGUgc2FtZSBhcyBjb25zb2xlLmxvZygpLlxuICAgKi9cbiAgaW5mbyguLi5vYmplY3RzOiBhbnlbXSkge1xuICAgIHRoaXMubG9nKGNvbnNvbGUuaW5mbywgTG9nTGV2ZWwuSW5mbywgb2JqZWN0cyk7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBtZXNzYWdlcyBvciBvYmplY3RzICB3aXRoIHRoZSB3YXJuaW5nIGxldmVsLlxuICAgKiBXb3JrcyB0aGUgc2FtZSBhcyBjb25zb2xlLmxvZygpLlxuICAgKi9cbiAgd2FybiguLi5vYmplY3RzOiBhbnlbXSkge1xuICAgIHRoaXMubG9nKGNvbnNvbGUud2FybiwgTG9nTGV2ZWwuV2FybmluZywgb2JqZWN0cyk7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBtZXNzYWdlcyBvciBvYmplY3RzICB3aXRoIHRoZSBlcnJvciBsZXZlbC5cbiAgICogV29ya3MgdGhlIHNhbWUgYXMgY29uc29sZS5sb2coKS5cbiAgICovXG4gIGVycm9yKC4uLm9iamVjdHM6IGFueVtdKSB7XG4gICAgdGhpcy5sb2coY29uc29sZS5lcnJvciwgTG9nTGV2ZWwuRXJyb3IsIG9iamVjdHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2coZnVuYzogRnVuY3Rpb24sIGxldmVsOiBMb2dMZXZlbCwgb2JqZWN0czogYW55W10pIHtcbiAgICBpZiAobGV2ZWwgPD0gTG9nZ2VyLmxldmVsKSB7XG4gICAgICBjb25zdCBsb2cgPSB0aGlzLnNvdXJjZSA/IFsnWycgKyB0aGlzLnNvdXJjZSArICddJ10uY29uY2F0KG9iamVjdHMpIDogb2JqZWN0cztcbiAgICAgIGZ1bmMuYXBwbHkoY29uc29sZSwgbG9nKTtcbiAgICAgIExvZ2dlci5vdXRwdXRzLmZvckVhY2goKG91dHB1dCkgPT4gb3V0cHV0LmFwcGx5KG91dHB1dCwgW3RoaXMuc291cmNlLCBsZXZlbF0uY29uY2F0KG9iamVjdHMpKSk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==