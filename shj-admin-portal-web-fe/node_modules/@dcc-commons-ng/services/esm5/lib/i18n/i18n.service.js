import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { LangChangeEvent, TranslateService } from '@ngx-translate/core';
import { includes } from 'lodash';
import { Logger } from '../logging/logging.service';
var log = new Logger('I18nService');
var languageKey = 'language';
/**
 * Pass-through function to mark a string for translation extraction.
 * Running `npm translations:extract` will include the given string by using this.
 * @param {string} s The string to extract for translation.
 * @return {string} The same string.
 */
export function extract(s) {
    return s;
}
var I18nService = /** @class */ (function () {
    function I18nService(translateService) {
        this.translateService = translateService;
        this.defaultLanguage = "en-US";
    }
    Object.defineProperty(I18nService.prototype, "language", {
        /**
         * Gets the current language.
         * @return {string} The current language code.
         */
        get: function () {
            return this.translateService.currentLang;
        },
        /**
         * Sets the current language.
         * Note: The current language is saved to the local storage.
         * If no parameter is specified, the language is loaded from local storage (if present).
         * @param {string} language The IETF language code to set.
         */
        set: function (language) {
            language = language || localStorage.getItem(languageKey) || this.translateService.getBrowserCultureLang();
            var isSupportedLanguage = includes(this.supportedLanguages, language);
            // If no exact match is found, search without the region
            if (language && !isSupportedLanguage) {
                language = language.split('-')[0];
                language = this.supportedLanguages.find(function (supportedLanguage) { return supportedLanguage.startsWith(language); }) || '';
                isSupportedLanguage = Boolean(language);
            }
            // Fallback if language is not supported
            if (!isSupportedLanguage) {
                if (this.translateService.getBrowserLang() !== undefined) {
                    language = this.translateService.getBrowserLang();
                }
                else {
                    language = this.defaultLanguage;
                }
            }
            log.debug("Language set to " + language);
            this.translateService.use(language);
            if (language && language.startsWith('ar')) {
                document.querySelector("html").setAttribute('dir', 'rtl');
                document.querySelector("html").setAttribute('lang', language);
            }
            else {
                document.querySelector("html").setAttribute('dir', 'ltr');
                document.querySelector("html").setAttribute('lang', language);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initializes i18n for the application.
     * Loads language from local storage if present, or sets default language.
     * @param {!string} defaultLanguage The default language to use.
     * @param {Array.<String>} supportedLanguages The list of supported languages.
     */
    I18nService.prototype.init = function (defaultLanguage, supportedLanguages) {
        this.defaultLanguage = defaultLanguage;
        this.supportedLanguages = supportedLanguages;
        this.language = '';
        this.translateService.onLangChange
            .subscribe(function (event) {
            localStorage.setItem(languageKey, event.lang);
        });
    };
    I18nService.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    I18nService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [TranslateService])
    ], I18nService);
    return I18nService;
}());
export { I18nService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRjYy1jb21tb25zLW5nL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2kxOG4vaTE4bi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxlQUFlLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRWhDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUVsRCxJQUFNLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0QyxJQUFNLFdBQVcsR0FBRyxVQUFVLENBQUM7QUFFL0I7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsT0FBTyxDQUFDLENBQVM7SUFDL0IsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBR0Q7SUFLRSxxQkFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFIdEQsb0JBQWUsR0FBVyxPQUFPLENBQUM7SUFJbEMsQ0FBQztJQU1ELHNCQUFJLGlDQUFRO1FBSlo7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7UUFDM0MsQ0FBQztRQUVEOzs7OztXQUtHO2FBQ0gsVUFBYSxRQUFnQjtZQUMzQixRQUFRLEdBQUcsUUFBUSxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFDMUcsSUFBSSxtQkFBbUIsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBRXRFLHdEQUF3RDtZQUN4RCxJQUFJLFFBQVEsSUFBSSxDQUFDLG1CQUFtQixFQUFFO2dCQUNwQyxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsUUFBUSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBQSxpQkFBaUIsSUFBSSxPQUFBLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDM0csbUJBQW1CLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3pDO1lBRUQsd0NBQXdDO1lBQ3hDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtnQkFDeEIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLEtBQUssU0FBUyxFQUFFO29CQUN4RCxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxDQUFDO2lCQUNuRDtxQkFBTTtvQkFDTCxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztpQkFDakM7YUFDRjtZQUVELEdBQUcsQ0FBQyxLQUFLLENBQUMscUJBQW1CLFFBQVUsQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFcEMsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDekMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUMxRCxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDL0Q7aUJBQU07Z0JBQ0wsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUMxRCxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDL0Q7UUFDSCxDQUFDOzs7T0F0Q0E7SUF3Q0Q7Ozs7O09BS0c7SUFDSCwwQkFBSSxHQUFKLFVBQUssZUFBdUIsRUFBRSxrQkFBNEI7UUFDeEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO1FBQzdDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBRW5CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZO2FBQy9CLFNBQVMsQ0FBQyxVQUFDLEtBQXNCO1lBQ2hDLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQWhFcUMsZ0JBQWdCOztJQUwzQyxXQUFXO1FBRHZCLFVBQVUsRUFBRTt5Q0FNMkIsZ0JBQWdCO09BTDNDLFdBQVcsQ0F1RXZCO0lBQUQsa0JBQUM7Q0FBQSxBQXZFRCxJQXVFQztTQXZFWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TGFuZ0NoYW5nZUV2ZW50LCBUcmFuc2xhdGVTZXJ2aWNlfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7aW5jbHVkZXN9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7TG9nZ2VyfSBmcm9tICcuLi9sb2dnaW5nL2xvZ2dpbmcuc2VydmljZSc7XG5cbmNvbnN0IGxvZyA9IG5ldyBMb2dnZXIoJ0kxOG5TZXJ2aWNlJyk7XG5jb25zdCBsYW5ndWFnZUtleSA9ICdsYW5ndWFnZSc7XG5cbi8qKlxuICogUGFzcy10aHJvdWdoIGZ1bmN0aW9uIHRvIG1hcmsgYSBzdHJpbmcgZm9yIHRyYW5zbGF0aW9uIGV4dHJhY3Rpb24uXG4gKiBSdW5uaW5nIGBucG0gdHJhbnNsYXRpb25zOmV4dHJhY3RgIHdpbGwgaW5jbHVkZSB0aGUgZ2l2ZW4gc3RyaW5nIGJ5IHVzaW5nIHRoaXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gcyBUaGUgc3RyaW5nIHRvIGV4dHJhY3QgZm9yIHRyYW5zbGF0aW9uLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgc2FtZSBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0KHM6IHN0cmluZykge1xuICByZXR1cm4gcztcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEkxOG5TZXJ2aWNlIHtcblxuICBkZWZhdWx0TGFuZ3VhZ2U6IHN0cmluZyA9IFwiZW4tVVNcIjtcbiAgc3VwcG9ydGVkTGFuZ3VhZ2VzOiBzdHJpbmdbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IGxhbmd1YWdlLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjdXJyZW50IGxhbmd1YWdlIGNvZGUuXG4gICAqL1xuICBnZXQgbGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmN1cnJlbnRMYW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgbGFuZ3VhZ2UuXG4gICAqIE5vdGU6IFRoZSBjdXJyZW50IGxhbmd1YWdlIGlzIHNhdmVkIHRvIHRoZSBsb2NhbCBzdG9yYWdlLlxuICAgKiBJZiBubyBwYXJhbWV0ZXIgaXMgc3BlY2lmaWVkLCB0aGUgbGFuZ3VhZ2UgaXMgbG9hZGVkIGZyb20gbG9jYWwgc3RvcmFnZSAoaWYgcHJlc2VudCkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSBUaGUgSUVURiBsYW5ndWFnZSBjb2RlIHRvIHNldC5cbiAgICovXG4gIHNldCBsYW5ndWFnZShsYW5ndWFnZTogc3RyaW5nKSB7XG4gICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZSB8fCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShsYW5ndWFnZUtleSkgfHwgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldEJyb3dzZXJDdWx0dXJlTGFuZygpO1xuICAgIGxldCBpc1N1cHBvcnRlZExhbmd1YWdlID0gaW5jbHVkZXModGhpcy5zdXBwb3J0ZWRMYW5ndWFnZXMsIGxhbmd1YWdlKTtcblxuICAgIC8vIElmIG5vIGV4YWN0IG1hdGNoIGlzIGZvdW5kLCBzZWFyY2ggd2l0aG91dCB0aGUgcmVnaW9uXG4gICAgaWYgKGxhbmd1YWdlICYmICFpc1N1cHBvcnRlZExhbmd1YWdlKSB7XG4gICAgICBsYW5ndWFnZSA9IGxhbmd1YWdlLnNwbGl0KCctJylbMF07XG4gICAgICBsYW5ndWFnZSA9IHRoaXMuc3VwcG9ydGVkTGFuZ3VhZ2VzLmZpbmQoc3VwcG9ydGVkTGFuZ3VhZ2UgPT4gc3VwcG9ydGVkTGFuZ3VhZ2Uuc3RhcnRzV2l0aChsYW5ndWFnZSkpIHx8ICcnO1xuICAgICAgaXNTdXBwb3J0ZWRMYW5ndWFnZSA9IEJvb2xlYW4obGFuZ3VhZ2UpO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIGlmIGxhbmd1YWdlIGlzIG5vdCBzdXBwb3J0ZWRcbiAgICBpZiAoIWlzU3VwcG9ydGVkTGFuZ3VhZ2UpIHtcbiAgICAgIGlmICh0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0QnJvd3NlckxhbmcoKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxhbmd1YWdlID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldEJyb3dzZXJMYW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYW5ndWFnZSA9IHRoaXMuZGVmYXVsdExhbmd1YWdlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxvZy5kZWJ1ZyhgTGFuZ3VhZ2Ugc2V0IHRvICR7bGFuZ3VhZ2V9YCk7XG4gICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLnVzZShsYW5ndWFnZSk7XG5cbiAgICBpZiAobGFuZ3VhZ2UgJiYgbGFuZ3VhZ2Uuc3RhcnRzV2l0aCgnYXInKSkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImh0bWxcIikuc2V0QXR0cmlidXRlKCdkaXInLCAncnRsJyk7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaHRtbFwiKS5zZXRBdHRyaWJ1dGUoJ2xhbmcnLCBsYW5ndWFnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJodG1sXCIpLnNldEF0dHJpYnV0ZSgnZGlyJywgJ2x0cicpO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImh0bWxcIikuc2V0QXR0cmlidXRlKCdsYW5nJywgbGFuZ3VhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBpMThuIGZvciB0aGUgYXBwbGljYXRpb24uXG4gICAqIExvYWRzIGxhbmd1YWdlIGZyb20gbG9jYWwgc3RvcmFnZSBpZiBwcmVzZW50LCBvciBzZXRzIGRlZmF1bHQgbGFuZ3VhZ2UuXG4gICAqIEBwYXJhbSB7IXN0cmluZ30gZGVmYXVsdExhbmd1YWdlIFRoZSBkZWZhdWx0IGxhbmd1YWdlIHRvIHVzZS5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gc3VwcG9ydGVkTGFuZ3VhZ2VzIFRoZSBsaXN0IG9mIHN1cHBvcnRlZCBsYW5ndWFnZXMuXG4gICAqL1xuICBpbml0KGRlZmF1bHRMYW5ndWFnZTogc3RyaW5nLCBzdXBwb3J0ZWRMYW5ndWFnZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5kZWZhdWx0TGFuZ3VhZ2UgPSBkZWZhdWx0TGFuZ3VhZ2U7XG4gICAgdGhpcy5zdXBwb3J0ZWRMYW5ndWFnZXMgPSBzdXBwb3J0ZWRMYW5ndWFnZXM7XG4gICAgdGhpcy5sYW5ndWFnZSA9ICcnO1xuXG4gICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLm9uTGFuZ0NoYW5nZVxuICAgICAgLnN1YnNjcmliZSgoZXZlbnQ6IExhbmdDaGFuZ2VFdmVudCkgPT4ge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShsYW5ndWFnZUtleSwgZXZlbnQubGFuZyk7XG4gICAgICB9KTtcbiAgfVxuXG59XG4iXX0=