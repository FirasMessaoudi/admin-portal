import { TranslateService } from '@ngx-translate/core';
/**
 * Pass-through function to mark a string for translation extraction.
 * Running `npm translations:extract` will include the given string by using this.
 * @param {string} s The string to extract for translation.
 * @return {string} The same string.
 */
import * as ɵngcc0 from '@angular/core';
export declare function extract(s: string): string;
export declare class I18nService {
    private translateService;
    defaultLanguage: string;
    supportedLanguages: string[];
    constructor(translateService: TranslateService);
    /**
     * Gets the current language.
     * @return {string} The current language code.
     */
    /**
    * Sets the current language.
    * Note: The current language is saved to the local storage.
    * If no parameter is specified, the language is loaded from local storage (if present).
    * @param {string} language The IETF language code to set.
    */
    language: string;
    /**
     * Initializes i18n for the application.
     * Loads language from local storage if present, or sets default language.
     * @param {!string} defaultLanguage The default language to use.
     * @param {Array.<String>} supportedLanguages The list of supported languages.
     */
    init(defaultLanguage: string, supportedLanguages: string[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<I18nService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<I18nService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImkxOG4uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XHJcbi8qKlxyXG4gKiBQYXNzLXRocm91Z2ggZnVuY3Rpb24gdG8gbWFyayBhIHN0cmluZyBmb3IgdHJhbnNsYXRpb24gZXh0cmFjdGlvbi5cclxuICogUnVubmluZyBgbnBtIHRyYW5zbGF0aW9uczpleHRyYWN0YCB3aWxsIGluY2x1ZGUgdGhlIGdpdmVuIHN0cmluZyBieSB1c2luZyB0aGlzLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcyBUaGUgc3RyaW5nIHRvIGV4dHJhY3QgZm9yIHRyYW5zbGF0aW9uLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzYW1lIHN0cmluZy5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGV4dHJhY3Qoczogc3RyaW5nKTogc3RyaW5nO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJMThuU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U7XHJcbiAgICBkZWZhdWx0TGFuZ3VhZ2U6IHN0cmluZztcclxuICAgIHN1cHBvcnRlZExhbmd1YWdlczogc3RyaW5nW107XHJcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlKTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY3VycmVudCBsYW5ndWFnZS5cclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGN1cnJlbnQgbGFuZ3VhZ2UgY29kZS5cclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAqIFNldHMgdGhlIGN1cnJlbnQgbGFuZ3VhZ2UuXHJcbiAgICAqIE5vdGU6IFRoZSBjdXJyZW50IGxhbmd1YWdlIGlzIHNhdmVkIHRvIHRoZSBsb2NhbCBzdG9yYWdlLlxyXG4gICAgKiBJZiBubyBwYXJhbWV0ZXIgaXMgc3BlY2lmaWVkLCB0aGUgbGFuZ3VhZ2UgaXMgbG9hZGVkIGZyb20gbG9jYWwgc3RvcmFnZSAoaWYgcHJlc2VudCkuXHJcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSBUaGUgSUVURiBsYW5ndWFnZSBjb2RlIHRvIHNldC5cclxuICAgICovXHJcbiAgICBsYW5ndWFnZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplcyBpMThuIGZvciB0aGUgYXBwbGljYXRpb24uXHJcbiAgICAgKiBMb2FkcyBsYW5ndWFnZSBmcm9tIGxvY2FsIHN0b3JhZ2UgaWYgcHJlc2VudCwgb3Igc2V0cyBkZWZhdWx0IGxhbmd1YWdlLlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBkZWZhdWx0TGFuZ3VhZ2UgVGhlIGRlZmF1bHQgbGFuZ3VhZ2UgdG8gdXNlLlxyXG4gICAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gc3VwcG9ydGVkTGFuZ3VhZ2VzIFRoZSBsaXN0IG9mIHN1cHBvcnRlZCBsYW5ndWFnZXMuXHJcbiAgICAgKi9cclxuICAgIGluaXQoZGVmYXVsdExhbmd1YWdlOiBzdHJpbmcsIHN1cHBvcnRlZExhbmd1YWdlczogc3RyaW5nW10pOiB2b2lkO1xyXG59XHJcbiJdfQ==