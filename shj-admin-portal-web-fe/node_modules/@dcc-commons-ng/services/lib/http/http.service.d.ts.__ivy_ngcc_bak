import { InjectionToken, Injector } from '@angular/core';
import { HttpClient, HttpHandler, HttpInterceptor } from '@angular/common/http';
declare module '@angular/common/http/http' {
    interface HttpClient {
        /**
         * Enables caching for this request.
         * @param {boolean} forceUpdate Forces request to be made and updates cache entry.
         * @return {HttpClient} The new instance.
         */
        cache(forceUpdate?: boolean): HttpClient;
        /**
         * Skips default error handler for this request.
         * @return {HttpClient} The new instance.
         */
        skipErrorHandler(): HttpClient;
        /**
         * Do not use API prefix for this request.
         * @return {HttpClient} The new instance.
         */
        disableApiPrefix(): HttpClient;
    }
}
/**
 * Allows to override default dynamic interceptors that can be disabled with the HttpService extension.
 * Except for very specific needs, you should better configure these interceptors directly in the constructor below
 * for better readability.
 *
 * For static interceptors that should always be enabled (like ApiPrefixInterceptor), use the standard
 * HTTP_INTERCEPTORS token.
 */
export declare const HTTP_DYNAMIC_INTERCEPTORS: InjectionToken<HttpInterceptor>;
/**
 * Extends HttpClient with per request configuration using dynamic interceptors.
 */
export declare class HttpService extends HttpClient {
    private httpHandler;
    private injector;
    private interceptors;
    constructor(httpHandler: HttpHandler, injector: Injector, interceptors?: HttpInterceptor[]);
    cache(forceUpdate?: boolean): HttpService;
    skipErrorHandler(): HttpService;
    disableApiPrefix(): HttpService;
    disableDefaultMock(): HttpService;
    addMock(mockInterceptor: HttpInterceptor): HttpService;
    request(method?: any, url?: any, options?: any): any;
    private removeInterceptor;
    private addInterceptor;
}
