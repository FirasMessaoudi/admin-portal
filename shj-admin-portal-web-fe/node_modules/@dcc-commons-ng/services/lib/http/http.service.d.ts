import { InjectionToken, Injector } from '@angular/core';
import { HttpClient, HttpHandler, HttpInterceptor } from '@angular/common/http';
import * as ɵngcc0 from '@angular/core';
declare module '@angular/common/http/http' {
    interface HttpClient {
        /**
         * Enables caching for this request.
         * @param {boolean} forceUpdate Forces request to be made and updates cache entry.
         * @return {HttpClient} The new instance.
         */
        cache(forceUpdate?: boolean): HttpClient;
        /**
         * Skips default error handler for this request.
         * @return {HttpClient} The new instance.
         */
        skipErrorHandler(): HttpClient;
        /**
         * Do not use API prefix for this request.
         * @return {HttpClient} The new instance.
         */
        disableApiPrefix(): HttpClient;
    }
}
/**
 * Allows to override default dynamic interceptors that can be disabled with the HttpService extension.
 * Except for very specific needs, you should better configure these interceptors directly in the constructor below
 * for better readability.
 *
 * For static interceptors that should always be enabled (like ApiPrefixInterceptor), use the standard
 * HTTP_INTERCEPTORS token.
 */
export declare const HTTP_DYNAMIC_INTERCEPTORS: InjectionToken<HttpInterceptor>;
/**
 * Extends HttpClient with per request configuration using dynamic interceptors.
 */
export declare class HttpService extends HttpClient {
    private httpHandler;
    private injector;
    private interceptors;
    constructor(httpHandler: HttpHandler, injector: Injector, interceptors?: HttpInterceptor[]);
    cache(forceUpdate?: boolean): HttpService;
    skipErrorHandler(): HttpService;
    disableApiPrefix(): HttpService;
    disableDefaultMock(): HttpService;
    addMock(mockInterceptor: HttpInterceptor): HttpService;
    request(method?: any, url?: any, options?: any): any;
    private removeInterceptor;
    private addInterceptor;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HttpService, [null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<HttpService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImh0dHAuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5kZWNsYXJlIG1vZHVsZSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvaHR0cCcge1xyXG4gICAgaW50ZXJmYWNlIEh0dHBDbGllbnQge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEVuYWJsZXMgY2FjaGluZyBmb3IgdGhpcyByZXF1ZXN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2VVcGRhdGUgRm9yY2VzIHJlcXVlc3QgdG8gYmUgbWFkZSBhbmQgdXBkYXRlcyBjYWNoZSBlbnRyeS5cclxuICAgICAgICAgKiBAcmV0dXJuIHtIdHRwQ2xpZW50fSBUaGUgbmV3IGluc3RhbmNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhY2hlKGZvcmNlVXBkYXRlPzogYm9vbGVhbik6IEh0dHBDbGllbnQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2tpcHMgZGVmYXVsdCBlcnJvciBoYW5kbGVyIGZvciB0aGlzIHJlcXVlc3QuXHJcbiAgICAgICAgICogQHJldHVybiB7SHR0cENsaWVudH0gVGhlIG5ldyBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBza2lwRXJyb3JIYW5kbGVyKCk6IEh0dHBDbGllbnQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRG8gbm90IHVzZSBBUEkgcHJlZml4IGZvciB0aGlzIHJlcXVlc3QuXHJcbiAgICAgICAgICogQHJldHVybiB7SHR0cENsaWVudH0gVGhlIG5ldyBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkaXNhYmxlQXBpUHJlZml4KCk6IEh0dHBDbGllbnQ7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFsbG93cyB0byBvdmVycmlkZSBkZWZhdWx0IGR5bmFtaWMgaW50ZXJjZXB0b3JzIHRoYXQgY2FuIGJlIGRpc2FibGVkIHdpdGggdGhlIEh0dHBTZXJ2aWNlIGV4dGVuc2lvbi5cclxuICogRXhjZXB0IGZvciB2ZXJ5IHNwZWNpZmljIG5lZWRzLCB5b3Ugc2hvdWxkIGJldHRlciBjb25maWd1cmUgdGhlc2UgaW50ZXJjZXB0b3JzIGRpcmVjdGx5IGluIHRoZSBjb25zdHJ1Y3RvciBiZWxvd1xyXG4gKiBmb3IgYmV0dGVyIHJlYWRhYmlsaXR5LlxyXG4gKlxyXG4gKiBGb3Igc3RhdGljIGludGVyY2VwdG9ycyB0aGF0IHNob3VsZCBhbHdheXMgYmUgZW5hYmxlZCAobGlrZSBBcGlQcmVmaXhJbnRlcmNlcHRvciksIHVzZSB0aGUgc3RhbmRhcmRcclxuICogSFRUUF9JTlRFUkNFUFRPUlMgdG9rZW4uXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBIVFRQX0RZTkFNSUNfSU5URVJDRVBUT1JTOiBJbmplY3Rpb25Ub2tlbjxIdHRwSW50ZXJjZXB0b3I+O1xyXG4vKipcclxuICogRXh0ZW5kcyBIdHRwQ2xpZW50IHdpdGggcGVyIHJlcXVlc3QgY29uZmlndXJhdGlvbiB1c2luZyBkeW5hbWljIGludGVyY2VwdG9ycy5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEh0dHBTZXJ2aWNlIGV4dGVuZHMgSHR0cENsaWVudCB7XHJcbiAgICBwcml2YXRlIGh0dHBIYW5kbGVyO1xyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcclxuICAgIHByaXZhdGUgaW50ZXJjZXB0b3JzO1xyXG4gICAgY29uc3RydWN0b3IoaHR0cEhhbmRsZXI6IEh0dHBIYW5kbGVyLCBpbmplY3RvcjogSW5qZWN0b3IsIGludGVyY2VwdG9ycz86IEh0dHBJbnRlcmNlcHRvcltdKTtcclxuICAgIGNhY2hlKGZvcmNlVXBkYXRlPzogYm9vbGVhbik6IEh0dHBTZXJ2aWNlO1xyXG4gICAgc2tpcEVycm9ySGFuZGxlcigpOiBIdHRwU2VydmljZTtcclxuICAgIGRpc2FibGVBcGlQcmVmaXgoKTogSHR0cFNlcnZpY2U7XHJcbiAgICBkaXNhYmxlRGVmYXVsdE1vY2soKTogSHR0cFNlcnZpY2U7XHJcbiAgICBhZGRNb2NrKG1vY2tJbnRlcmNlcHRvcjogSHR0cEludGVyY2VwdG9yKTogSHR0cFNlcnZpY2U7XHJcbiAgICByZXF1ZXN0KG1ldGhvZD86IGFueSwgdXJsPzogYW55LCBvcHRpb25zPzogYW55KTogYW55O1xyXG4gICAgcHJpdmF0ZSByZW1vdmVJbnRlcmNlcHRvcjtcclxuICAgIHByaXZhdGUgYWRkSW50ZXJjZXB0b3I7XHJcbn1cclxuIl19