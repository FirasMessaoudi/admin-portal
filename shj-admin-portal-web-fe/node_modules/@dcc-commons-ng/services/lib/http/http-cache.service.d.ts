import { HttpResponse } from '@angular/common/http';
import * as ɵngcc0 from '@angular/core';
export interface HttpCacheEntry {
    lastUpdated: Date;
    data: HttpResponse<any>;
}
/**
 * Provides a cache facility for HTTP requests with configurable persistence policy.
 */
export declare class HttpCacheService {
    private cachedData;
    private storage;
    constructor();
    /**
     * Sets the cache data for the specified request.
     * @param {!string} url The request URL.
     * @param {ResponseOptions} data The received data.
     * @param {Date=} lastUpdated The cache last update, current date is used if not specified.
     */
    setCacheData(url: string, data: HttpResponse<any>, lastUpdated?: Date): void;
    /**
     * Gets the cached data for the specified request.
     * @param {!string} url The request URL.
     * @return {?ResponseOptions} The cached data or null if no cached data exists for this request.
     */
    getCacheData(url: string): HttpResponse<any> | null;
    /**
     * Gets the cached entry for the specified request.
     * @param {!string} url The request URL.
     * @return {?HttpCacheEntry} The cache entry or null if no cache entry exists for this request.
     */
    getHttpCacheEntry(url: string): HttpCacheEntry | null;
    /**
     * Clears the cached entry (if exists) for the specified request.
     * @param {!string} url The request URL.
     */
    clearCache(url: string): void;
    /**
     * Cleans cache entries older than the specified date.
     * @param {date=} expirationDate The cache expiration date. If no date is specified, all cache is cleared.
     */
    cleanCache(expirationDate?: Date): void;
    /**
     * Sets the cache persistence policy.
     * Note that changing the cache persistence will also clear the cache from its previous storage.
     * @param {'local'|'session'=} persistence How the cache should be persisted, it can be either local or session
     *   storage, or if no value is provided it will be only in-memory (default).
     */
    setPersistence(persistence?: 'local' | 'session'): void;
    private saveCacheData;
    private loadCacheData;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HttpCacheService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<HttpCacheService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1jYWNoZS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImh0dHAtY2FjaGUuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuZXhwb3J0IGludGVyZmFjZSBIdHRwQ2FjaGVFbnRyeSB7XHJcbiAgICBsYXN0VXBkYXRlZDogRGF0ZTtcclxuICAgIGRhdGE6IEh0dHBSZXNwb25zZTxhbnk+O1xyXG59XHJcbi8qKlxyXG4gKiBQcm92aWRlcyBhIGNhY2hlIGZhY2lsaXR5IGZvciBIVFRQIHJlcXVlc3RzIHdpdGggY29uZmlndXJhYmxlIHBlcnNpc3RlbmNlIHBvbGljeS5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEh0dHBDYWNoZVNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBjYWNoZWREYXRhO1xyXG4gICAgcHJpdmF0ZSBzdG9yYWdlO1xyXG4gICAgY29uc3RydWN0b3IoKTtcclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgY2FjaGUgZGF0YSBmb3IgdGhlIHNwZWNpZmllZCByZXF1ZXN0LlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSB1cmwgVGhlIHJlcXVlc3QgVVJMLlxyXG4gICAgICogQHBhcmFtIHtSZXNwb25zZU9wdGlvbnN9IGRhdGEgVGhlIHJlY2VpdmVkIGRhdGEuXHJcbiAgICAgKiBAcGFyYW0ge0RhdGU9fSBsYXN0VXBkYXRlZCBUaGUgY2FjaGUgbGFzdCB1cGRhdGUsIGN1cnJlbnQgZGF0ZSBpcyB1c2VkIGlmIG5vdCBzcGVjaWZpZWQuXHJcbiAgICAgKi9cclxuICAgIHNldENhY2hlRGF0YSh1cmw6IHN0cmluZywgZGF0YTogSHR0cFJlc3BvbnNlPGFueT4sIGxhc3RVcGRhdGVkPzogRGF0ZSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGNhY2hlZCBkYXRhIGZvciB0aGUgc3BlY2lmaWVkIHJlcXVlc3QuXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IHVybCBUaGUgcmVxdWVzdCBVUkwuXHJcbiAgICAgKiBAcmV0dXJuIHs/UmVzcG9uc2VPcHRpb25zfSBUaGUgY2FjaGVkIGRhdGEgb3IgbnVsbCBpZiBubyBjYWNoZWQgZGF0YSBleGlzdHMgZm9yIHRoaXMgcmVxdWVzdC5cclxuICAgICAqL1xyXG4gICAgZ2V0Q2FjaGVEYXRhKHVybDogc3RyaW5nKTogSHR0cFJlc3BvbnNlPGFueT4gfCBudWxsO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjYWNoZWQgZW50cnkgZm9yIHRoZSBzcGVjaWZpZWQgcmVxdWVzdC5cclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gdXJsIFRoZSByZXF1ZXN0IFVSTC5cclxuICAgICAqIEByZXR1cm4gez9IdHRwQ2FjaGVFbnRyeX0gVGhlIGNhY2hlIGVudHJ5IG9yIG51bGwgaWYgbm8gY2FjaGUgZW50cnkgZXhpc3RzIGZvciB0aGlzIHJlcXVlc3QuXHJcbiAgICAgKi9cclxuICAgIGdldEh0dHBDYWNoZUVudHJ5KHVybDogc3RyaW5nKTogSHR0cENhY2hlRW50cnkgfCBudWxsO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgdGhlIGNhY2hlZCBlbnRyeSAoaWYgZXhpc3RzKSBmb3IgdGhlIHNwZWNpZmllZCByZXF1ZXN0LlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSB1cmwgVGhlIHJlcXVlc3QgVVJMLlxyXG4gICAgICovXHJcbiAgICBjbGVhckNhY2hlKHVybDogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQ2xlYW5zIGNhY2hlIGVudHJpZXMgb2xkZXIgdGhhbiB0aGUgc3BlY2lmaWVkIGRhdGUuXHJcbiAgICAgKiBAcGFyYW0ge2RhdGU9fSBleHBpcmF0aW9uRGF0ZSBUaGUgY2FjaGUgZXhwaXJhdGlvbiBkYXRlLiBJZiBubyBkYXRlIGlzIHNwZWNpZmllZCwgYWxsIGNhY2hlIGlzIGNsZWFyZWQuXHJcbiAgICAgKi9cclxuICAgIGNsZWFuQ2FjaGUoZXhwaXJhdGlvbkRhdGU/OiBEYXRlKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgY2FjaGUgcGVyc2lzdGVuY2UgcG9saWN5LlxyXG4gICAgICogTm90ZSB0aGF0IGNoYW5naW5nIHRoZSBjYWNoZSBwZXJzaXN0ZW5jZSB3aWxsIGFsc28gY2xlYXIgdGhlIGNhY2hlIGZyb20gaXRzIHByZXZpb3VzIHN0b3JhZ2UuXHJcbiAgICAgKiBAcGFyYW0geydsb2NhbCd8J3Nlc3Npb24nPX0gcGVyc2lzdGVuY2UgSG93IHRoZSBjYWNoZSBzaG91bGQgYmUgcGVyc2lzdGVkLCBpdCBjYW4gYmUgZWl0aGVyIGxvY2FsIG9yIHNlc3Npb25cclxuICAgICAqICAgc3RvcmFnZSwgb3IgaWYgbm8gdmFsdWUgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBvbmx5IGluLW1lbW9yeSAoZGVmYXVsdCkuXHJcbiAgICAgKi9cclxuICAgIHNldFBlcnNpc3RlbmNlKHBlcnNpc3RlbmNlPzogJ2xvY2FsJyB8ICdzZXNzaW9uJyk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIHNhdmVDYWNoZURhdGE7XHJcbiAgICBwcml2YXRlIGxvYWRDYWNoZURhdGE7XHJcbn1cclxuIl19