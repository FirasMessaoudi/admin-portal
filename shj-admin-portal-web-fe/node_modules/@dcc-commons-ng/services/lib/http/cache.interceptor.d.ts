import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { HttpCacheService } from './http-cache.service';
/**
 * Caches HTTP requests.
 * Use ExtendedHttpClient fluent API to configure caching for each request.
 */
import * as ɵngcc0 from '@angular/core';
export declare class CacheInterceptor implements HttpInterceptor {
    private httpCacheService;
    private forceUpdate;
    constructor(httpCacheService: HttpCacheService);
    /**
     * Configures interceptor options
     * @param {{update: boolean}} options If update option is enabled, forces request to be made and updates cache entry.
     * @return {CacheInterceptor} The configured instance.
     */
    configure(options?: {
        update?: boolean;
    } | null): CacheInterceptor;
    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CacheInterceptor, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<CacheInterceptor>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuaW50ZXJjZXB0b3IuZC50cyIsInNvdXJjZXMiOlsiY2FjaGUuaW50ZXJjZXB0b3IuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEh0dHBDYWNoZVNlcnZpY2UgfSBmcm9tICcuL2h0dHAtY2FjaGUuc2VydmljZSc7XHJcbi8qKlxyXG4gKiBDYWNoZXMgSFRUUCByZXF1ZXN0cy5cclxuICogVXNlIEV4dGVuZGVkSHR0cENsaWVudCBmbHVlbnQgQVBJIHRvIGNvbmZpZ3VyZSBjYWNoaW5nIGZvciBlYWNoIHJlcXVlc3QuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDYWNoZUludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuICAgIHByaXZhdGUgaHR0cENhY2hlU2VydmljZTtcclxuICAgIHByaXZhdGUgZm9yY2VVcGRhdGU7XHJcbiAgICBjb25zdHJ1Y3RvcihodHRwQ2FjaGVTZXJ2aWNlOiBIdHRwQ2FjaGVTZXJ2aWNlKTtcclxuICAgIC8qKlxyXG4gICAgICogQ29uZmlndXJlcyBpbnRlcmNlcHRvciBvcHRpb25zXHJcbiAgICAgKiBAcGFyYW0ge3t1cGRhdGU6IGJvb2xlYW59fSBvcHRpb25zIElmIHVwZGF0ZSBvcHRpb24gaXMgZW5hYmxlZCwgZm9yY2VzIHJlcXVlc3QgdG8gYmUgbWFkZSBhbmQgdXBkYXRlcyBjYWNoZSBlbnRyeS5cclxuICAgICAqIEByZXR1cm4ge0NhY2hlSW50ZXJjZXB0b3J9IFRoZSBjb25maWd1cmVkIGluc3RhbmNlLlxyXG4gICAgICovXHJcbiAgICBjb25maWd1cmUob3B0aW9ucz86IHtcclxuICAgICAgICB1cGRhdGU/OiBib29sZWFuO1xyXG4gICAgfSB8IG51bGwpOiBDYWNoZUludGVyY2VwdG9yO1xyXG4gICAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XHJcbn1cclxuIl19