/*
 * Copyright (c) 2019 ELM. All rights reserved.
 */
import { animate, animateChild, group, query, sequence, style, transition, trigger } from '@angular/animations';
export const RouteAnimations = trigger('routerAnimations', [
    transition('* <=> *', [
        // css styles at start of transition
        //style({ opacity: 0 }),
        // animation and styles at end of transition
        //animate('0.5s', style({ opacity: 1 }))
        query(':enter, :leave', style({ position: 'fixed', width: '100%' }), { optional: true }),
        query(':enter', style({ transform: 'translateX(100%)' }), { optional: true }),
        sequence([
            query(':leave', animateChild(), { optional: true }),
            group([
                query(':leave', [
                    style({ transform: 'translateX(0%)' }),
                    animate('500ms cubic-bezier(.75,-0.48,.26,1.52)', style({ transform: 'translateX(-100%)' }))
                ], { optional: true }),
                query(':enter', [
                    style({ transform: 'translateX(100%)' }),
                    animate('500ms cubic-bezier(.75,-0.48,.26,1.52)', style({ transform: 'translateX(0%)' }))
                ], { optional: true }),
            ]),
            query(':enter', animateChild(), { optional: true }),
        ])
    ])
]);
/**
 * Provides helper methods to create routes.
 */
export class Route {
    /**
     * Creates routes using the shell component and authentication.
     * @param routes The routes to add.
     * @return {Route} The new route using shell as the base.
     */
    static withShell(routes, appLayout, authGuard) {
        return {
            path: '',
            component: appLayout,
            children: routes,
            canActivate: [authGuard],
            // Reuse ShellComponent instance when navigating between child views
            data: { reuse: true }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkY2MtY29tbW9ucy1uZy9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9yb3V0ZS9yb3V0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBR0gsT0FBTyxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUU5RyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0lBQ3pELFVBQVUsQ0FBQyxTQUFTLEVBQUU7UUFFcEIsb0NBQW9DO1FBQ3BDLHdCQUF3QjtRQUV4Qiw0Q0FBNEM7UUFDNUMsd0NBQXdDO1FBRXhDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDO1FBQ3BGLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLGtCQUFrQixFQUFDLENBQUMsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztRQUV6RSxRQUFRLENBQUM7WUFDUCxLQUFLLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDO1lBQ2pELEtBQUssQ0FBQztnQkFDSixLQUFLLENBQUMsUUFBUSxFQUFFO29CQUNkLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSxnQkFBZ0IsRUFBQyxDQUFDO29CQUNwQyxPQUFPLENBQUMsd0NBQXdDLEVBQzlDLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSxtQkFBbUIsRUFBQyxDQUFDLENBQ3hDO2lCQUNGLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUM7Z0JBQ3BCLEtBQUssQ0FBQyxRQUFRLEVBQUU7b0JBQ2QsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLGtCQUFrQixFQUFDLENBQUM7b0JBQ3RDLE9BQU8sQ0FBQyx3Q0FBd0MsRUFDOUMsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLGdCQUFnQixFQUFDLENBQUMsQ0FDckM7aUJBQ0YsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQzthQUNyQixDQUFDO1lBRUYsS0FBSyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztTQUVsRCxDQUFDO0tBQ0gsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVIOztHQUVHO0FBQ0gsTUFBTSxPQUFPLEtBQUs7SUFFaEI7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBYyxFQUFFLFNBQWMsRUFBRSxTQUFjO1FBQzdELE9BQU87WUFDTCxJQUFJLEVBQUUsRUFBRTtZQUNSLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUN4QixvRUFBb0U7WUFDcEUsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBQztTQUNwQixDQUFDO0lBQ0osQ0FBQztDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSBFTE0uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuaW1wb3J0IHtSb3V0ZSBhcyBuZ1JvdXRlLCBSb3V0ZXN9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge2FuaW1hdGUsIGFuaW1hdGVDaGlsZCwgZ3JvdXAsIHF1ZXJ5LCBzZXF1ZW5jZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXJ9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5leHBvcnQgY29uc3QgUm91dGVBbmltYXRpb25zID0gdHJpZ2dlcigncm91dGVyQW5pbWF0aW9ucycsIFtcbiAgdHJhbnNpdGlvbignKiA8PT4gKicsIFtcblxuICAgIC8vIGNzcyBzdHlsZXMgYXQgc3RhcnQgb2YgdHJhbnNpdGlvblxuICAgIC8vc3R5bGUoeyBvcGFjaXR5OiAwIH0pLFxuXG4gICAgLy8gYW5pbWF0aW9uIGFuZCBzdHlsZXMgYXQgZW5kIG9mIHRyYW5zaXRpb25cbiAgICAvL2FuaW1hdGUoJzAuNXMnLCBzdHlsZSh7IG9wYWNpdHk6IDEgfSkpXG5cbiAgICBxdWVyeSgnOmVudGVyLCA6bGVhdmUnLCBzdHlsZSh7cG9zaXRpb246ICdmaXhlZCcsIHdpZHRoOiAnMTAwJSd9KSwge29wdGlvbmFsOiB0cnVlfSksXG4gICAgcXVlcnkoJzplbnRlcicsIHN0eWxlKHt0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDEwMCUpJ30pLCB7b3B0aW9uYWw6IHRydWV9KSxcblxuICAgIHNlcXVlbmNlKFtcbiAgICAgIHF1ZXJ5KCc6bGVhdmUnLCBhbmltYXRlQ2hpbGQoKSwge29wdGlvbmFsOiB0cnVlfSksXG4gICAgICBncm91cChbXG4gICAgICAgIHF1ZXJ5KCc6bGVhdmUnLCBbXG4gICAgICAgICAgc3R5bGUoe3RyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCUpJ30pLFxuICAgICAgICAgIGFuaW1hdGUoJzUwMG1zIGN1YmljLWJlemllciguNzUsLTAuNDgsLjI2LDEuNTIpJyxcbiAgICAgICAgICAgIHN0eWxlKHt0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC0xMDAlKSd9KVxuICAgICAgICAgIClcbiAgICAgICAgXSwge29wdGlvbmFsOiB0cnVlfSksXG4gICAgICAgIHF1ZXJ5KCc6ZW50ZXInLCBbXG4gICAgICAgICAgc3R5bGUoe3RyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMTAwJSknfSksXG4gICAgICAgICAgYW5pbWF0ZSgnNTAwbXMgY3ViaWMtYmV6aWVyKC43NSwtMC40OCwuMjYsMS41MiknLFxuICAgICAgICAgICAgc3R5bGUoe3RyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCUpJ30pXG4gICAgICAgICAgKVxuICAgICAgICBdLCB7b3B0aW9uYWw6IHRydWV9KSxcbiAgICAgIF0pLFxuXG4gICAgICBxdWVyeSgnOmVudGVyJywgYW5pbWF0ZUNoaWxkKCksIHtvcHRpb25hbDogdHJ1ZX0pLFxuXG4gICAgXSlcbiAgXSlcbl0pO1xuXG4vKipcbiAqIFByb3ZpZGVzIGhlbHBlciBtZXRob2RzIHRvIGNyZWF0ZSByb3V0ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZSB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgcm91dGVzIHVzaW5nIHRoZSBzaGVsbCBjb21wb25lbnQgYW5kIGF1dGhlbnRpY2F0aW9uLlxuICAgKiBAcGFyYW0gcm91dGVzIFRoZSByb3V0ZXMgdG8gYWRkLlxuICAgKiBAcmV0dXJuIHtSb3V0ZX0gVGhlIG5ldyByb3V0ZSB1c2luZyBzaGVsbCBhcyB0aGUgYmFzZS5cbiAgICovXG4gIHN0YXRpYyB3aXRoU2hlbGwocm91dGVzOiBSb3V0ZXMsIGFwcExheW91dDogYW55LCBhdXRoR3VhcmQ6IGFueSk6IG5nUm91dGUge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiAnJyxcbiAgICAgIGNvbXBvbmVudDogYXBwTGF5b3V0LFxuICAgICAgY2hpbGRyZW46IHJvdXRlcyxcbiAgICAgIGNhbkFjdGl2YXRlOiBbYXV0aEd1YXJkXSxcbiAgICAgIC8vIFJldXNlIFNoZWxsQ29tcG9uZW50IGluc3RhbmNlIHdoZW4gbmF2aWdhdGluZyBiZXR3ZWVuIGNoaWxkIHZpZXdzXG4gICAgICBkYXRhOiB7cmV1c2U6IHRydWV9XG4gICAgfTtcbiAgfVxuXG59XG4iXX0=