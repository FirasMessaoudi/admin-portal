/*
 * Copyright (c) 2019 ELM. All rights reserved.
 */
var DccCommonsNgServicesModule_1;
import { __decorate, __metadata, __param } from "tslib";
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { RouteReuseStrategy, RouterModule } from '@angular/router';
import { TranslateLoader, TranslateModule } from '@ngx-translate/core';
import { RouteReusableStrategy } from './route/route-reusable-strategy';
import { I18nService } from './i18n/i18n.service';
import { HttpService } from './http/http.service';
import { HttpCacheService } from './http/http-cache.service';
import { ApiPrefixInterceptor } from './http/api-prefix.interceptor';
import { ErrorHandlerInterceptor } from './http/error-handler.interceptor';
import { CacheInterceptor } from './http/cache.interceptor';
import { JwtInterceptor, LOGIN_URL, PUBLIC_URL_PATTERNS } from './http/jwt.interceptor';
import { TranslateHttpLoader } from "@ngx-translate/http-loader";
import { CookieService } from "ngx-cookie-service";
import { CsrfInterceptor } from "./http/csrf.interceptor";
import { MockInterceptor } from "./http/mock.interceptor";
export const I18N_FOLDER_PATH = './assets/i18n/';
const ɵ0 = (HttpLoaderFactory);
let DccCommonsNgServicesModule = DccCommonsNgServicesModule_1 = class DccCommonsNgServicesModule {
    constructor(parentModule) {
        // Import guard
        if (parentModule) {
            throw new Error(`${parentModule} has already been loaded. Import Services module in the AppModule only.`);
        }
    }
    static forRoot(publicUrlPatterns = [], loginUrl, i18nFolderPath) {
        return {
            ngModule: DccCommonsNgServicesModule_1,
            providers: [
                { provide: PUBLIC_URL_PATTERNS, useValue: publicUrlPatterns },
                { provide: LOGIN_URL, useValue: loginUrl },
                { provide: I18N_FOLDER_PATH, useValue: i18nFolderPath }
            ]
        };
    }
};
DccCommonsNgServicesModule.ctorParameters = () => [
    { type: DccCommonsNgServicesModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
__decorate([
    __param(0, Optional()), __param(1, Optional()), __param(2, Optional()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, String, String]),
    __metadata("design:returntype", Object)
], DccCommonsNgServicesModule, "forRoot", null);
DccCommonsNgServicesModule = DccCommonsNgServicesModule_1 = __decorate([
    NgModule({
        imports: [
            CommonModule,
            HttpClientModule,
            TranslateModule.forRoot({
                loader: {
                    provide: TranslateLoader,
                    useFactory: ɵ0,
                    deps: [HttpClient, I18N_FOLDER_PATH]
                }
            }),
            RouterModule
        ],
        declarations: [],
        providers: [
            I18nService,
            HttpCacheService,
            ApiPrefixInterceptor,
            ErrorHandlerInterceptor,
            CacheInterceptor,
            CookieService,
            JwtInterceptor,
            CsrfInterceptor,
            MockInterceptor,
            {
                provide: HttpClient,
                useClass: HttpService
            },
            {
                provide: RouteReuseStrategy,
                useClass: RouteReusableStrategy
            }
        ]
    }),
    __param(0, Optional()), __param(0, SkipSelf()),
    __metadata("design:paramtypes", [DccCommonsNgServicesModule])
], DccCommonsNgServicesModule);
export { DccCommonsNgServicesModule };
export function HttpLoaderFactory(http, i18nFolderPath) {
    return new TranslateHttpLoader(http, i18nFolderPath, '.json');
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRjYy1jb21tb25zLW5nL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRzs7O0FBRUgsT0FBTyxFQUFzQixRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLFVBQVUsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRSxPQUFPLEVBQUMsZUFBZSxFQUFFLGVBQWUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBRXJFLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDbkUsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFDekUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFDLGNBQWMsRUFBRSxTQUFTLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RixPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDakQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUV4RCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBVyxnQkFBZ0IsQ0FBQztXQVVyQyxDQUFDLGlCQUFpQixDQUFDO0FBMkJ2QyxJQUFhLDBCQUEwQixrQ0FBdkMsTUFBYSwwQkFBMEI7SUFDckMsWUFBb0MsWUFBd0M7UUFDMUUsZUFBZTtRQUNmLElBQUksWUFBWSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxZQUFZLHlFQUF5RSxDQUFDLENBQUM7U0FDM0c7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBYSxvQkFBbUMsRUFBRSxFQUFjLFFBQWdCLEVBQWMsY0FBc0I7UUFDaEksT0FBTztZQUNMLFFBQVEsRUFBRSw0QkFBMEI7WUFDcEMsU0FBUyxFQUFFO2dCQUNULEVBQUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBQztnQkFDM0QsRUFBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUM7Z0JBQ3hDLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUM7YUFDdEQ7U0FDRixDQUFBO0lBQ0gsQ0FBQztDQUVGLENBQUE7O1lBbEJtRCwwQkFBMEIsdUJBQS9ELFFBQVEsWUFBSSxRQUFROztBQU9qQztJQUFnQixXQUFBLFFBQVEsRUFBRSxDQUFBLEVBQXlDLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBb0IsV0FBQSxRQUFRLEVBQUUsQ0FBQTs7cUNBQTdELEtBQUs7OytDQVNsRDtBQWpCVSwwQkFBMEI7SUFsQ3RDLFFBQVEsQ0FBQztRQUNSLE9BQU8sRUFBRTtZQUNQLFlBQVk7WUFDWixnQkFBZ0I7WUFDaEIsZUFBZSxDQUFDLE9BQU8sQ0FBQztnQkFDdEIsTUFBTSxFQUFFO29CQUNOLE9BQU8sRUFBRSxlQUFlO29CQUN4QixVQUFVLElBQXFCO29CQUMvQixJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUM7aUJBQ3JDO2FBQ0YsQ0FBQztZQUNGLFlBQVk7U0FDYjtRQUNELFlBQVksRUFBRSxFQUFFO1FBQ2hCLFNBQVMsRUFBRTtZQUNULFdBQVc7WUFDWCxnQkFBZ0I7WUFDaEIsb0JBQW9CO1lBQ3BCLHVCQUF1QjtZQUN2QixnQkFBZ0I7WUFDaEIsYUFBYTtZQUNiLGNBQWM7WUFDZCxlQUFlO1lBQ2YsZUFBZTtZQUNmO2dCQUNFLE9BQU8sRUFBRSxVQUFVO2dCQUNuQixRQUFRLEVBQUUsV0FBVzthQUN0QjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxrQkFBa0I7Z0JBQzNCLFFBQVEsRUFBRSxxQkFBcUI7YUFDaEM7U0FDRjtLQUNGLENBQUM7SUFFYSxXQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsV0FBQSxRQUFRLEVBQUUsQ0FBQTtxQ0FBZSwwQkFBMEI7R0FEakUsMEJBQTBCLENBbUJ0QztTQW5CWSwwQkFBMEI7QUFxQnZDLE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxJQUFnQixFQUFFLGNBQXNCO0lBQ3hFLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IEVMTS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5pbXBvcnQge01vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLCBPcHRpb25hbCwgU2tpcFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0h0dHBDbGllbnQsIEh0dHBDbGllbnRNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7Um91dGVSZXVzZVN0cmF0ZWd5LCBSb3V0ZXJNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge1RyYW5zbGF0ZUxvYWRlciwgVHJhbnNsYXRlTW9kdWxlfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuaW1wb3J0IHtSb3V0ZVJldXNhYmxlU3RyYXRlZ3l9IGZyb20gJy4vcm91dGUvcm91dGUtcmV1c2FibGUtc3RyYXRlZ3knO1xuaW1wb3J0IHtJMThuU2VydmljZX0gZnJvbSAnLi9pMThuL2kxOG4uc2VydmljZSc7XG5pbXBvcnQge0h0dHBTZXJ2aWNlfSBmcm9tICcuL2h0dHAvaHR0cC5zZXJ2aWNlJztcbmltcG9ydCB7SHR0cENhY2hlU2VydmljZX0gZnJvbSAnLi9odHRwL2h0dHAtY2FjaGUuc2VydmljZSc7XG5pbXBvcnQge0FwaVByZWZpeEludGVyY2VwdG9yfSBmcm9tICcuL2h0dHAvYXBpLXByZWZpeC5pbnRlcmNlcHRvcic7XG5pbXBvcnQge0Vycm9ySGFuZGxlckludGVyY2VwdG9yfSBmcm9tICcuL2h0dHAvZXJyb3ItaGFuZGxlci5pbnRlcmNlcHRvcic7XG5pbXBvcnQge0NhY2hlSW50ZXJjZXB0b3J9IGZyb20gJy4vaHR0cC9jYWNoZS5pbnRlcmNlcHRvcic7XG5pbXBvcnQge0p3dEludGVyY2VwdG9yLCBMT0dJTl9VUkwsIFBVQkxJQ19VUkxfUEFUVEVSTlN9IGZyb20gJy4vaHR0cC9qd3QuaW50ZXJjZXB0b3InO1xuaW1wb3J0IHtUcmFuc2xhdGVIdHRwTG9hZGVyfSBmcm9tIFwiQG5neC10cmFuc2xhdGUvaHR0cC1sb2FkZXJcIjtcbmltcG9ydCB7Q29va2llU2VydmljZX0gZnJvbSBcIm5neC1jb29raWUtc2VydmljZVwiO1xuaW1wb3J0IHtDc3JmSW50ZXJjZXB0b3J9IGZyb20gXCIuL2h0dHAvY3NyZi5pbnRlcmNlcHRvclwiO1xuaW1wb3J0IHtNb2NrSW50ZXJjZXB0b3J9IGZyb20gXCIuL2h0dHAvbW9jay5pbnRlcmNlcHRvclwiO1xuXG5leHBvcnQgY29uc3QgSTE4Tl9GT0xERVJfUEFUSDogc3RyaW5nID0gJy4vYXNzZXRzL2kxOG4vJztcblxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIEh0dHBDbGllbnRNb2R1bGUsXG4gICAgVHJhbnNsYXRlTW9kdWxlLmZvclJvb3Qoe1xuICAgICAgbG9hZGVyOiB7XG4gICAgICAgIHByb3ZpZGU6IFRyYW5zbGF0ZUxvYWRlcixcbiAgICAgICAgdXNlRmFjdG9yeTogKEh0dHBMb2FkZXJGYWN0b3J5KSxcbiAgICAgICAgZGVwczogW0h0dHBDbGllbnQsIEkxOE5fRk9MREVSX1BBVEhdXG4gICAgICB9XG4gICAgfSksXG4gICAgUm91dGVyTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW10sXG4gIHByb3ZpZGVyczogW1xuICAgIEkxOG5TZXJ2aWNlLFxuICAgIEh0dHBDYWNoZVNlcnZpY2UsXG4gICAgQXBpUHJlZml4SW50ZXJjZXB0b3IsXG4gICAgRXJyb3JIYW5kbGVySW50ZXJjZXB0b3IsXG4gICAgQ2FjaGVJbnRlcmNlcHRvcixcbiAgICBDb29raWVTZXJ2aWNlLFxuICAgIEp3dEludGVyY2VwdG9yLFxuICAgIENzcmZJbnRlcmNlcHRvcixcbiAgICBNb2NrSW50ZXJjZXB0b3IsXG4gICAge1xuICAgICAgcHJvdmlkZTogSHR0cENsaWVudCxcbiAgICAgIHVzZUNsYXNzOiBIdHRwU2VydmljZVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogUm91dGVSZXVzZVN0cmF0ZWd5LFxuICAgICAgdXNlQ2xhc3M6IFJvdXRlUmV1c2FibGVTdHJhdGVneVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEY2NDb21tb25zTmdTZXJ2aWNlc01vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogRGNjQ29tbW9uc05nU2VydmljZXNNb2R1bGUpIHtcbiAgICAvLyBJbXBvcnQgZ3VhcmRcbiAgICBpZiAocGFyZW50TW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cGFyZW50TW9kdWxlfSBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZC4gSW1wb3J0IFNlcnZpY2VzIG1vZHVsZSBpbiB0aGUgQXBwTW9kdWxlIG9ubHkuYCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoQE9wdGlvbmFsKCkgcHVibGljVXJsUGF0dGVybnM6IEFycmF5PHN0cmluZz4gPSBbXSwgQE9wdGlvbmFsKCkgbG9naW5Vcmw6IHN0cmluZywgQE9wdGlvbmFsKCkgaTE4bkZvbGRlclBhdGg6IHN0cmluZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogRGNjQ29tbW9uc05nU2VydmljZXNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge3Byb3ZpZGU6IFBVQkxJQ19VUkxfUEFUVEVSTlMsIHVzZVZhbHVlOiBwdWJsaWNVcmxQYXR0ZXJuc30sXG4gICAgICAgIHtwcm92aWRlOiBMT0dJTl9VUkwsIHVzZVZhbHVlOiBsb2dpblVybH0sXG4gICAgICAgIHtwcm92aWRlOiBJMThOX0ZPTERFUl9QQVRILCB1c2VWYWx1ZTogaTE4bkZvbGRlclBhdGh9XG4gICAgICBdXG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEh0dHBMb2FkZXJGYWN0b3J5KGh0dHA6IEh0dHBDbGllbnQsIGkxOG5Gb2xkZXJQYXRoOiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBUcmFuc2xhdGVIdHRwTG9hZGVyKGh0dHAsIGkxOG5Gb2xkZXJQYXRoLCAnLmpzb24nKTtcbn1cbiJdfQ==