/**
 * Simple logger system with the possibility of registering custom outputs.
 *
 * 4 different log levels are provided, with corresponding methods:
 * - debug   : for debug information
 * - info    : for informative status of the application (success, ...)
 * - warning : for non-critical errors that do not prevent normal application behavior
 * - error   : for critical errors that prevent normal application behavior
 *
 * Example usage:
 * ```
 * import { Logger } from 'app/core/logger.service';
 *
 * const log = new Logger('myFile');
 * ...
 * log.debug('something happened');
 * ```
 *
 * To disable debug and info logs in production, add this snippet to your root component:
 * ```
 * export class AppComponent implements OnInit {
 *   ngOnInit() {
 *     if (environment.production) {
 *       Logger.enableProductionMode();
 *     }
 *     ...
 *   }
 * }
 *
 * If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.
 */
/**
 * The possible log levels.
 * LogLevel.Off is never emitted and only used with Logger.level property to disable logs.
 */
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Off"] = 0] = "Off";
    LogLevel[LogLevel["Error"] = 1] = "Error";
    LogLevel[LogLevel["Warning"] = 2] = "Warning";
    LogLevel[LogLevel["Info"] = 3] = "Info";
    LogLevel[LogLevel["Debug"] = 4] = "Debug";
})(LogLevel || (LogLevel = {}));
export class Logger {
    constructor(source) {
        this.source = source;
    }
    /**
     * Enables production mode.
     * Sets logging level to LogLevel.Warning.
     */
    static enableProductionMode() {
        Logger.level = LogLevel.Warning;
    }
    /**
     * Logs messages or objects  with the debug level.
     * Works the same as console.log().
     */
    debug(...objects) {
        this.log(console.log, LogLevel.Debug, objects);
    }
    /**
     * Logs messages or objects  with the info level.
     * Works the same as console.log().
     */
    info(...objects) {
        this.log(console.info, LogLevel.Info, objects);
    }
    /**
     * Logs messages or objects  with the warning level.
     * Works the same as console.log().
     */
    warn(...objects) {
        this.log(console.warn, LogLevel.Warning, objects);
    }
    /**
     * Logs messages or objects  with the error level.
     * Works the same as console.log().
     */
    error(...objects) {
        this.log(console.error, LogLevel.Error, objects);
    }
    log(func, level, objects) {
        if (level <= Logger.level) {
            const log = this.source ? ['[' + this.source + ']'].concat(objects) : objects;
            func.apply(console, log);
            Logger.outputs.forEach((output) => output.apply(output, [this.source, level].concat(objects)));
        }
    }
}
/**
 * Current logging level.
 * Set it to LogLevel.Off to disable logs completely.
 */
Logger.level = LogLevel.Debug;
/**
 * Additional log outputs.
 */
Logger.outputs = [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRjYy1jb21tb25zLW5nL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2xvZ2dpbmcvbG9nZ2luZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4Qkc7QUFFSDs7O0dBR0c7QUFDSCxNQUFNLENBQU4sSUFBWSxRQU1YO0FBTkQsV0FBWSxRQUFRO0lBQ2xCLHFDQUFPLENBQUE7SUFDUCx5Q0FBSyxDQUFBO0lBQ0wsNkNBQU8sQ0FBQTtJQUNQLHVDQUFJLENBQUE7SUFDSix5Q0FBSyxDQUFBO0FBQ1AsQ0FBQyxFQU5XLFFBQVEsS0FBUixRQUFRLFFBTW5CO0FBT0QsTUFBTSxPQUFPLE1BQU07SUFhakIsWUFBb0IsTUFBZTtRQUFmLFdBQU0sR0FBTixNQUFNLENBQVM7SUFDbkMsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxvQkFBb0I7UUFDekIsTUFBTSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsR0FBRyxPQUFjO1FBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLENBQUMsR0FBRyxPQUFjO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLENBQUMsR0FBRyxPQUFjO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsR0FBRyxPQUFjO1FBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTyxHQUFHLENBQUMsSUFBYyxFQUFFLEtBQWUsRUFBRSxPQUFjO1FBQ3pELElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDekIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUM5RSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDaEc7SUFDSCxDQUFDOztBQTVERDs7O0dBR0c7QUFDSSxZQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztBQUU5Qjs7R0FFRztBQUNJLGNBQU8sR0FBZ0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTaW1wbGUgbG9nZ2VyIHN5c3RlbSB3aXRoIHRoZSBwb3NzaWJpbGl0eSBvZiByZWdpc3RlcmluZyBjdXN0b20gb3V0cHV0cy5cbiAqXG4gKiA0IGRpZmZlcmVudCBsb2cgbGV2ZWxzIGFyZSBwcm92aWRlZCwgd2l0aCBjb3JyZXNwb25kaW5nIG1ldGhvZHM6XG4gKiAtIGRlYnVnICAgOiBmb3IgZGVidWcgaW5mb3JtYXRpb25cbiAqIC0gaW5mbyAgICA6IGZvciBpbmZvcm1hdGl2ZSBzdGF0dXMgb2YgdGhlIGFwcGxpY2F0aW9uIChzdWNjZXNzLCAuLi4pXG4gKiAtIHdhcm5pbmcgOiBmb3Igbm9uLWNyaXRpY2FsIGVycm9ycyB0aGF0IGRvIG5vdCBwcmV2ZW50IG5vcm1hbCBhcHBsaWNhdGlvbiBiZWhhdmlvclxuICogLSBlcnJvciAgIDogZm9yIGNyaXRpY2FsIGVycm9ycyB0aGF0IHByZXZlbnQgbm9ybWFsIGFwcGxpY2F0aW9uIGJlaGF2aW9yXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqIGBgYFxuICogaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnYXBwL2NvcmUvbG9nZ2VyLnNlcnZpY2UnO1xuICpcbiAqIGNvbnN0IGxvZyA9IG5ldyBMb2dnZXIoJ215RmlsZScpO1xuICogLi4uXG4gKiBsb2cuZGVidWcoJ3NvbWV0aGluZyBoYXBwZW5lZCcpO1xuICogYGBgXG4gKlxuICogVG8gZGlzYWJsZSBkZWJ1ZyBhbmQgaW5mbyBsb2dzIGluIHByb2R1Y3Rpb24sIGFkZCB0aGlzIHNuaXBwZXQgdG8geW91ciByb290IGNvbXBvbmVudDpcbiAqIGBgYFxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gKiAgIG5nT25Jbml0KCkge1xuICogICAgIGlmIChlbnZpcm9ubWVudC5wcm9kdWN0aW9uKSB7XG4gKiAgICAgICBMb2dnZXIuZW5hYmxlUHJvZHVjdGlvbk1vZGUoKTtcbiAqICAgICB9XG4gKiAgICAgLi4uXG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byBwcm9jZXNzIGxvZ3MgdGhyb3VnaCBvdGhlciBvdXRwdXRzIHRoYW4gY29uc29sZSwgeW91IGNhbiBhZGQgTG9nT3V0cHV0IGZ1bmN0aW9ucyB0byBMb2dnZXIub3V0cHV0cy5cbiAqL1xuXG4vKipcbiAqIFRoZSBwb3NzaWJsZSBsb2cgbGV2ZWxzLlxuICogTG9nTGV2ZWwuT2ZmIGlzIG5ldmVyIGVtaXR0ZWQgYW5kIG9ubHkgdXNlZCB3aXRoIExvZ2dlci5sZXZlbCBwcm9wZXJ0eSB0byBkaXNhYmxlIGxvZ3MuXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgT2ZmID0gMCxcbiAgRXJyb3IsXG4gIFdhcm5pbmcsXG4gIEluZm8sXG4gIERlYnVnXG59XG5cbi8qKlxuICogTG9nIG91dHB1dCBoYW5kbGVyIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgdHlwZSBMb2dPdXRwdXQgPSAoc291cmNlOiBzdHJpbmcsIGxldmVsOiBMb2dMZXZlbCwgLi4ub2JqZWN0czogYW55W10pID0+IHZvaWQ7XG5cbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IGxvZ2dpbmcgbGV2ZWwuXG4gICAqIFNldCBpdCB0byBMb2dMZXZlbC5PZmYgdG8gZGlzYWJsZSBsb2dzIGNvbXBsZXRlbHkuXG4gICAqL1xuICBzdGF0aWMgbGV2ZWwgPSBMb2dMZXZlbC5EZWJ1ZztcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBsb2cgb3V0cHV0cy5cbiAgICovXG4gIHN0YXRpYyBvdXRwdXRzOiBMb2dPdXRwdXRbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc291cmNlPzogc3RyaW5nKSB7XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlcyBwcm9kdWN0aW9uIG1vZGUuXG4gICAqIFNldHMgbG9nZ2luZyBsZXZlbCB0byBMb2dMZXZlbC5XYXJuaW5nLlxuICAgKi9cbiAgc3RhdGljIGVuYWJsZVByb2R1Y3Rpb25Nb2RlKCkge1xuICAgIExvZ2dlci5sZXZlbCA9IExvZ0xldmVsLldhcm5pbmc7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBtZXNzYWdlcyBvciBvYmplY3RzICB3aXRoIHRoZSBkZWJ1ZyBsZXZlbC5cbiAgICogV29ya3MgdGhlIHNhbWUgYXMgY29uc29sZS5sb2coKS5cbiAgICovXG4gIGRlYnVnKC4uLm9iamVjdHM6IGFueVtdKSB7XG4gICAgdGhpcy5sb2coY29uc29sZS5sb2csIExvZ0xldmVsLkRlYnVnLCBvYmplY3RzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIG1lc3NhZ2VzIG9yIG9iamVjdHMgIHdpdGggdGhlIGluZm8gbGV2ZWwuXG4gICAqIFdvcmtzIHRoZSBzYW1lIGFzIGNvbnNvbGUubG9nKCkuXG4gICAqL1xuICBpbmZvKC4uLm9iamVjdHM6IGFueVtdKSB7XG4gICAgdGhpcy5sb2coY29uc29sZS5pbmZvLCBMb2dMZXZlbC5JbmZvLCBvYmplY3RzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIG1lc3NhZ2VzIG9yIG9iamVjdHMgIHdpdGggdGhlIHdhcm5pbmcgbGV2ZWwuXG4gICAqIFdvcmtzIHRoZSBzYW1lIGFzIGNvbnNvbGUubG9nKCkuXG4gICAqL1xuICB3YXJuKC4uLm9iamVjdHM6IGFueVtdKSB7XG4gICAgdGhpcy5sb2coY29uc29sZS53YXJuLCBMb2dMZXZlbC5XYXJuaW5nLCBvYmplY3RzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIG1lc3NhZ2VzIG9yIG9iamVjdHMgIHdpdGggdGhlIGVycm9yIGxldmVsLlxuICAgKiBXb3JrcyB0aGUgc2FtZSBhcyBjb25zb2xlLmxvZygpLlxuICAgKi9cbiAgZXJyb3IoLi4ub2JqZWN0czogYW55W10pIHtcbiAgICB0aGlzLmxvZyhjb25zb2xlLmVycm9yLCBMb2dMZXZlbC5FcnJvciwgb2JqZWN0cyk7XG4gIH1cblxuICBwcml2YXRlIGxvZyhmdW5jOiBGdW5jdGlvbiwgbGV2ZWw6IExvZ0xldmVsLCBvYmplY3RzOiBhbnlbXSkge1xuICAgIGlmIChsZXZlbCA8PSBMb2dnZXIubGV2ZWwpIHtcbiAgICAgIGNvbnN0IGxvZyA9IHRoaXMuc291cmNlID8gWydbJyArIHRoaXMuc291cmNlICsgJ10nXS5jb25jYXQob2JqZWN0cykgOiBvYmplY3RzO1xuICAgICAgZnVuYy5hcHBseShjb25zb2xlLCBsb2cpO1xuICAgICAgTG9nZ2VyLm91dHB1dHMuZm9yRWFjaCgob3V0cHV0KSA9PiBvdXRwdXQuYXBwbHkob3V0cHV0LCBbdGhpcy5zb3VyY2UsIGxldmVsXS5jb25jYXQob2JqZWN0cykpKTtcbiAgICB9XG4gIH1cblxufVxuIl19