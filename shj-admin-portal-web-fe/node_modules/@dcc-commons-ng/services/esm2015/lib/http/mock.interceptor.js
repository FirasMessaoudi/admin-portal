/*
 * Copyright (c) 2019 ELM. All rights reserved.
 */
import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import { delay, dematerialize, materialize, mergeMap } from 'rxjs/operators';
import { Logger } from '../logging/logging.service';
const log = new Logger('MockInterceptor');
let MockInterceptor = class MockInterceptor {
    constructor(environment) {
        this.environment = environment;
    }
    intercept(request, next) {
        // if mock is not enabled or we are not in dev environment, then do nothing
        if (!this.environment.mock || !this.environment.dev) {
            return next.handle(request);
        }
        log.debug('################## Mock is enabled');
        // array in local storage for registered users
        let users = JSON.parse(localStorage.getItem('users')) || [];
        // wrap in delayed observable to simulate server api call
        return of(null).pipe(mergeMap(() => {
            // authenticate
            if (request.url.indexOf('/api/auth/login') != -1 && request.method === 'POST') {
                // if login details are valid return 200 OK with user details and fake jwt token
                let body = {
                    authorities: [{ "authority": "DQS_ADMIN" }],
                    principal: "admin",
                    name: "admin"
                };
                return of(new HttpResponse({ status: 200, body: body }));
            }
            // logout
            if (request.url.indexOf('/api/auth/logout') != -1 && request.method === 'POST') {
                // if login details are valid return 200 OK with user details and fake jwt token
                return of(new HttpResponse({ status: 200, body: 'true' }));
            }
            // get users
            if (request.url.indexOf('/api/users/list') != -1 && request.method === 'GET') {
                // check for fake auth token in header and return users if valid, this security is implemented server side in a real application
                users = JSON.parse('{"content":[{"id":21,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444444,"userName":"qweqwe","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251767000,"authorities":[{"id":21,"authority":"DQS_USER"}],"tokenExpiryDate":null},{"id":22,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444445,"userName":"qweqwer","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251787000,"authorities":[{"id":22,"authority":"DQS_USER"}],"tokenExpiryDate":null},{"id":23,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444446,"userName":"qweqwerq","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251908000,"authorities":[{"id":23,"authority":"DQS_USER"}],"tokenExpiryDate":null},{"id":24,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444447,"userName":"qweqwerw","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251909000,"authorities":[{"id":24,"authority":"DQS_USER"}],"tokenExpiryDate":null},{"id":25,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444448,"userName":"qweqwere","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251909000,"authorities":[{"id":25,"authority":"DQS_USER"}],"tokenExpiryDate":null},{"id":26,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444449,"userName":"qweqwerr","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251909000,"authorities":[{"id":26,"authority":"DQS_USER"}],"tokenExpiryDate":null},{"id":27,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444450,"userName":"qweqwert","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251909000,"authorities":[{"id":27,"authority":"DQS_USER"}],"tokenExpiryDate":null},{"id":28,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444452,"userName":"qweqweru","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251910000,"authorities":[{"id":28,"authority":"DQS_USER"}],"tokenExpiryDate":null},{"id":29,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444451,"userName":"qweqwery","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251910000,"authorities":[{"id":29,"authority":"DQS_USER"}],"tokenExpiryDate":null},{"id":30,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444454,"userName":"qweqwero","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251910000,"authorities":[{"id":30,"authority":"DQS_USER"}],"tokenExpiryDate":null}],"pageable":{"sort":{"sorted":false,"unsorted":true,"empty":true},"pageNumber":2,"pageSize":10,"offset":20,"unpaged":false,"paged":true},"last":false,"totalPages":8,"totalElements":71,"sort":{"sorted":false,"unsorted":true,"empty":true},"first":false,"numberOfElements":10,"size":10,"number":2,"empty":false}');
                return of(new HttpResponse({ status: 200, body: users }));
            }
            // get user details
            if (request.url.indexOf('/api/users/find') != -1 && request.method === 'GET') {
                // check for fake auth token in header and return users if valid, this security is implemented server side in a real application
                let body = JSON.parse('{"id":22,"dateOfBirthGregorian":null,"dateOfBirthHijri":14401010,"email":"myemail@mycompany.com","familyName":"MyFamilyName","firstName":"MyFirstName","gender":"M","grandFatherName":null,"subtribeName":null,"fatherName":null,"lastLoginDate":null,"mobileNumber":555555555,"nin":1234444445,"userName":"qweqwer","avatarFile":null,"avatar":null,"numberOfTries":0,"password":"<CONFIDENTIAL>","passwordHash":"<CONFIDENTIAL>","preferredLanguage":null,"updateDate":null,"deleted":false,"activated":true,"blockDate":null,"blocked":false,"changePasswordRequired":false,"creationDate":1548251787000,"authorities":[{"id":22,"authority":"DQS_USER"}],"tokenExpiryDate":null}');
                return of(new HttpResponse({ status: 200, body: body }));
            }
            // pass through any requests not handled above
            return next.handle(request);
        }))
            // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)
            .pipe(materialize())
            .pipe(delay(500))
            .pipe(dematerialize());
    }
};
MockInterceptor.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['environment',] }] }
];
MockInterceptor = __decorate([
    Injectable(),
    __param(0, Inject('environment')),
    __metadata("design:paramtypes", [Object])
], MockInterceptor);
export { MockInterceptor };
//# sourceMappingURL=data:application/json;base64,