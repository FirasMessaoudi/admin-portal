import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest, HttpXsrfTokenExtractor } from '@angular/common/http';
import { CookieService } from "ngx-cookie-service";
import { Router } from "@angular/router";
const CSRF_HEADER_NAME = 'X-XSRF-TOKEN';
let CsrfInterceptor = class CsrfInterceptor {
    constructor(cookieService, router, tokenExtractor) {
        this.cookieService = cookieService;
        this.router = router;
        this.tokenExtractor = tokenExtractor;
    }
    intercept(request, next) {
        const token = this.tokenExtractor.getToken();
        // add authorization header with jwt token if available
        let headers = request.headers;
        if (token != null && request.headers.get(CSRF_HEADER_NAME) == null && request.method == 'POST') {
            headers = request.headers.append(CSRF_HEADER_NAME, token);
        }
        request = request.clone({ headers });
        return next.handle(request);
    }
};
CsrfInterceptor.ctorParameters = () => [
    { type: CookieService },
    { type: Router },
    { type: HttpXsrfTokenExtractor }
];
CsrfInterceptor = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [CookieService, Router, HttpXsrfTokenExtractor])
], CsrfInterceptor);
export { CsrfInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NyZi5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkY2MtY29tbW9ucy1uZy9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9odHRwL2NzcmYuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsV0FBVyxFQUNYLGVBQWUsRUFDZixXQUFXLEVBQ1gsc0JBQXNCLEVBQ3ZCLE1BQU0sc0JBQXNCLENBQUM7QUFFOUIsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUV2QyxNQUFNLGdCQUFnQixHQUFHLGNBQWMsQ0FBQztBQUd4QyxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0lBRzFCLFlBQW9CLGFBQTRCLEVBQVUsTUFBYyxFQUFVLGNBQXNDO1FBQXBHLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLG1CQUFjLEdBQWQsY0FBYyxDQUF3QjtJQUN4SCxDQUFDO0lBRUQsU0FBUyxDQUFDLE9BQXlCLEVBQUUsSUFBaUI7UUFFcEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQVksQ0FBQztRQUV2RCx1REFBdUQ7UUFDdkQsSUFBSSxPQUFPLEdBQWdCLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDM0MsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksTUFBTSxFQUFFO1lBQzlGLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzRDtRQUNELE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUVGLENBQUE7O1lBaEJvQyxhQUFhO1lBQWtCLE1BQU07WUFBMEIsc0JBQXNCOztBQUg3RyxlQUFlO0lBRDNCLFVBQVUsRUFBRTtxQ0FJd0IsYUFBYSxFQUFrQixNQUFNLEVBQTBCLHNCQUFzQjtHQUg3RyxlQUFlLENBbUIzQjtTQW5CWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEh0dHBFdmVudCxcbiAgSHR0cEhhbmRsZXIsXG4gIEh0dHBIZWFkZXJzLFxuICBIdHRwSW50ZXJjZXB0b3IsXG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwWHNyZlRva2VuRXh0cmFjdG9yXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0Nvb2tpZVNlcnZpY2V9IGZyb20gXCJuZ3gtY29va2llLXNlcnZpY2VcIjtcbmltcG9ydCB7Um91dGVyfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5cbmNvbnN0IENTUkZfSEVBREVSX05BTUUgPSAnWC1YU1JGLVRPS0VOJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENzcmZJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvb2tpZVNlcnZpY2U6IENvb2tpZVNlcnZpY2UsIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgdG9rZW5FeHRyYWN0b3I6IEh0dHBYc3JmVG9rZW5FeHRyYWN0b3IpIHtcbiAgfVxuXG4gIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcy50b2tlbkV4dHJhY3Rvci5nZXRUb2tlbigpIGFzIHN0cmluZztcblxuICAgIC8vIGFkZCBhdXRob3JpemF0aW9uIGhlYWRlciB3aXRoIGp3dCB0b2tlbiBpZiBhdmFpbGFibGVcbiAgICBsZXQgaGVhZGVyczogSHR0cEhlYWRlcnMgPSByZXF1ZXN0LmhlYWRlcnM7XG4gICAgaWYgKHRva2VuICE9IG51bGwgJiYgcmVxdWVzdC5oZWFkZXJzLmdldChDU1JGX0hFQURFUl9OQU1FKSA9PSBudWxsICYmIHJlcXVlc3QubWV0aG9kID09ICdQT1NUJykge1xuICAgICAgaGVhZGVycyA9IHJlcXVlc3QuaGVhZGVycy5hcHBlbmQoQ1NSRl9IRUFERVJfTkFNRSwgdG9rZW4pO1xuICAgIH1cbiAgICByZXF1ZXN0ID0gcmVxdWVzdC5jbG9uZSh7aGVhZGVyc30pO1xuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KTtcbiAgfVxuXG59XG4iXX0=