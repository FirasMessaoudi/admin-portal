import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { HttpErrorResponse } from '@angular/common/http';
import { catchError } from 'rxjs/operators';
import { Logger } from '../logging/logging.service';
const log = new Logger('ErrorHandlerInterceptor');
/**
 * Adds a default error handler to all requests.
 */
let ErrorHandlerInterceptor = class ErrorHandlerInterceptor {
    constructor(router, environment) {
        this.router = router;
        this.environment = environment;
    }
    intercept(request, next) {
        return next.handle(request).pipe(catchError(error => this.errorHandler(error)));
    }
    // Customize the default error handler here if needed
    errorHandler(response) {
        if (!this.environment.production) {
            // Do something with the error
            log.error('Request error', JSON.stringify(response));
        }
        if (response instanceof HttpErrorResponse) {
            if (response.status === 401) {
                this.router.navigate(['login.html']);
            }
        }
        throw response;
    }
};
ErrorHandlerInterceptor.ctorParameters = () => [
    { type: Router },
    { type: undefined, decorators: [{ type: Inject, args: ['environment',] }] }
];
ErrorHandlerInterceptor = __decorate([
    Injectable(),
    __param(1, Inject('environment')),
    __metadata("design:paramtypes", [Router, Object])
], ErrorHandlerInterceptor);
export { ErrorHandlerInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxlci5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkY2MtY29tbW9ucy1uZy9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9odHRwL2Vycm9yLWhhbmRsZXIuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQUMsaUJBQWlCLEVBQXVELE1BQU0sc0JBQXNCLENBQUM7QUFFN0csT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTFDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUVsRCxNQUFNLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBRWxEOztHQUVHO0FBRUgsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFJbEMsWUFBb0IsTUFBYyxFQUF5QixXQUFnQjtRQUF2RCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBO0lBQ2hDLENBQUM7SUFFRCxTQUFTLENBQUMsT0FBeUIsRUFBRSxJQUFpQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRCxxREFBcUQ7SUFDN0MsWUFBWSxDQUFDLFFBQXdCO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRTtZQUNoQyw4QkFBOEI7WUFDOUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3REO1FBQ0QsSUFBSSxRQUFRLFlBQVksaUJBQWlCLEVBQUU7WUFDekMsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2FBQ3RDO1NBQ0Y7UUFFRCxNQUFNLFFBQVEsQ0FBQztJQUNqQixDQUFDO0NBRUYsQ0FBQTs7WUF2QjZCLE1BQU07NENBQUcsTUFBTSxTQUFDLGFBQWE7O0FBSjlDLHVCQUF1QjtJQURuQyxVQUFVLEVBQUU7SUFLMEIsV0FBQSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7cUNBQTlCLE1BQU07R0FKdkIsdUJBQXVCLENBMkJuQztTQTNCWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1JvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7SHR0cEVycm9yUmVzcG9uc2UsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3R9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2NhdGNoRXJyb3J9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uL2xvZ2dpbmcvbG9nZ2luZy5zZXJ2aWNlJztcblxuY29uc3QgbG9nID0gbmV3IExvZ2dlcignRXJyb3JIYW5kbGVySW50ZXJjZXB0b3InKTtcblxuLyoqXG4gKiBBZGRzIGEgZGVmYXVsdCBlcnJvciBoYW5kbGVyIHRvIGFsbCByZXF1ZXN0cy5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEVycm9ySGFuZGxlckludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICBwcml2YXRlIGVudmlyb25tZW50OiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlciwgQEluamVjdCgnZW52aXJvbm1lbnQnKSBlbnZpcm9ubWVudDogYW55KSB7XG4gICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50XG4gIH1cblxuICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpLnBpcGUoY2F0Y2hFcnJvcihlcnJvciA9PiB0aGlzLmVycm9ySGFuZGxlcihlcnJvcikpKTtcbiAgfVxuXG4gIC8vIEN1c3RvbWl6ZSB0aGUgZGVmYXVsdCBlcnJvciBoYW5kbGVyIGhlcmUgaWYgbmVlZGVkXG4gIHByaXZhdGUgZXJyb3JIYW5kbGVyKHJlc3BvbnNlOiBIdHRwRXZlbnQ8YW55Pik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBpZiAoIXRoaXMuZW52aXJvbm1lbnQucHJvZHVjdGlvbikge1xuICAgICAgLy8gRG8gc29tZXRoaW5nIHdpdGggdGhlIGVycm9yXG4gICAgICBsb2cuZXJyb3IoJ1JlcXVlc3QgZXJyb3InLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZSkpO1xuICAgIH1cbiAgICBpZiAocmVzcG9uc2UgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnbG9naW4uaHRtbCddKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyByZXNwb25zZTtcbiAgfVxuXG59XG4iXX0=