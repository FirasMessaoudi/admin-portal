/*
 * Copyright (c) 2019 ELM. All rights reserved.
 */
import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { each } from 'lodash';
import { Logger } from '../logging/logging.service';
const log = new Logger('HttpCacheService');
const cachePersistenceKey = 'httpCache';
/**
 * Provides a cache facility for HTTP requests with configurable persistence policy.
 */
let HttpCacheService = class HttpCacheService {
    constructor() {
        this.cachedData = {};
        this.storage = null;
        this.loadCacheData();
    }
    /**
     * Sets the cache data for the specified request.
     * @param {!string} url The request URL.
     * @param {ResponseOptions} data The received data.
     * @param {Date=} lastUpdated The cache last update, current date is used if not specified.
     */
    setCacheData(url, data, lastUpdated) {
        this.cachedData[url] = {
            lastUpdated: lastUpdated || new Date(),
            data: data
        };
        log.debug(`Cache set for key: "${url}"`);
        this.saveCacheData();
    }
    /**
     * Gets the cached data for the specified request.
     * @param {!string} url The request URL.
     * @return {?ResponseOptions} The cached data or null if no cached data exists for this request.
     */
    getCacheData(url) {
        const cacheEntry = this.cachedData[url];
        if (cacheEntry) {
            log.debug(`Cache hit for key: "${url}"`);
            return cacheEntry.data;
        }
        return null;
    }
    /**
     * Gets the cached entry for the specified request.
     * @param {!string} url The request URL.
     * @return {?HttpCacheEntry} The cache entry or null if no cache entry exists for this request.
     */
    getHttpCacheEntry(url) {
        return this.cachedData[url] || null;
    }
    /**
     * Clears the cached entry (if exists) for the specified request.
     * @param {!string} url The request URL.
     */
    clearCache(url) {
        delete this.cachedData[url];
        log.debug(`Cache cleared for key: "${url}"`);
        this.saveCacheData();
    }
    /**
     * Cleans cache entries older than the specified date.
     * @param {date=} expirationDate The cache expiration date. If no date is specified, all cache is cleared.
     */
    cleanCache(expirationDate) {
        if (expirationDate) {
            each(this.cachedData, (value, key) => {
                if (expirationDate >= value.lastUpdated) {
                    delete this.cachedData[key];
                }
            });
        }
        else {
            this.cachedData = {};
        }
        this.saveCacheData();
    }
    /**
     * Sets the cache persistence policy.
     * Note that changing the cache persistence will also clear the cache from its previous storage.
     * @param {'local'|'session'=} persistence How the cache should be persisted, it can be either local or session
     *   storage, or if no value is provided it will be only in-memory (default).
     */
    setPersistence(persistence) {
        this.cleanCache();
        this.storage = persistence === 'local' || persistence === 'session' ? window[persistence + 'Storage'] : null;
        this.loadCacheData();
    }
    saveCacheData() {
        if (this.storage) {
            this.storage[cachePersistenceKey] = JSON.stringify(this.cachedData);
        }
    }
    loadCacheData() {
        const data = this.storage ? this.storage[cachePersistenceKey] : null;
        this.cachedData = data ? JSON.parse(data) : {};
    }
};
HttpCacheService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], HttpCacheService);
export { HttpCacheService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1jYWNoZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRjYy1jb21tb25zLW5nL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2h0dHAvaHR0cC1jYWNoZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHOztBQUVILE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUU1QixPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFFbEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUMzQyxNQUFNLG1CQUFtQixHQUFHLFdBQVcsQ0FBQztBQU94Qzs7R0FFRztBQUVILElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBSzNCO1FBSFEsZUFBVSxHQUF1QyxFQUFFLENBQUM7UUFDcEQsWUFBTyxHQUFtQixJQUFJLENBQUM7UUFHckMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILFlBQVksQ0FBQyxHQUFXLEVBQUUsSUFBdUIsRUFBRSxXQUFrQjtRQUNuRSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHO1lBQ3JCLFdBQVcsRUFBRSxXQUFXLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDdEMsSUFBSSxFQUFFLElBQUk7U0FDWCxDQUFDO1FBQ0YsR0FBRyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxZQUFZLENBQUMsR0FBVztRQUN0QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXhDLElBQUksVUFBVSxFQUFFO1lBQ2QsR0FBRyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUN6QyxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUM7U0FDeEI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsaUJBQWlCLENBQUMsR0FBVztRQUMzQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxVQUFVLENBQUMsR0FBVztRQUNwQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLEtBQUssQ0FBQywyQkFBMkIsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVUsQ0FBQyxjQUFxQjtRQUM5QixJQUFJLGNBQWMsRUFBRTtZQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQXFCLEVBQUUsR0FBVyxFQUFFLEVBQUU7Z0JBQzNELElBQUksY0FBYyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUU7b0JBQ3ZDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDN0I7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztTQUN0QjtRQUNELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxjQUFjLENBQUMsV0FBaUM7UUFDOUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxLQUFLLE9BQU8sSUFBSSxXQUFXLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDN0csSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTyxhQUFhO1FBQ25CLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckU7SUFDSCxDQUFDO0lBRU8sYUFBYTtRQUNuQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNyRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2pELENBQUM7Q0FFRixDQUFBO0FBbkdZLGdCQUFnQjtJQUQ1QixVQUFVLEVBQUU7O0dBQ0EsZ0JBQWdCLENBbUc1QjtTQW5HWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IEVMTS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG5pbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwUmVzcG9uc2V9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7ZWFjaH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uL2xvZ2dpbmcvbG9nZ2luZy5zZXJ2aWNlJztcblxuY29uc3QgbG9nID0gbmV3IExvZ2dlcignSHR0cENhY2hlU2VydmljZScpO1xuY29uc3QgY2FjaGVQZXJzaXN0ZW5jZUtleSA9ICdodHRwQ2FjaGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBDYWNoZUVudHJ5IHtcbiAgbGFzdFVwZGF0ZWQ6IERhdGU7XG4gIGRhdGE6IEh0dHBSZXNwb25zZTxhbnk+O1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGEgY2FjaGUgZmFjaWxpdHkgZm9yIEhUVFAgcmVxdWVzdHMgd2l0aCBjb25maWd1cmFibGUgcGVyc2lzdGVuY2UgcG9saWN5LlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSHR0cENhY2hlU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBjYWNoZWREYXRhOiB7IFtrZXk6IHN0cmluZ106IEh0dHBDYWNoZUVudHJ5OyB9ID0ge307XG4gIHByaXZhdGUgc3RvcmFnZTogU3RvcmFnZSB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubG9hZENhY2hlRGF0YSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGNhY2hlIGRhdGEgZm9yIHRoZSBzcGVjaWZpZWQgcmVxdWVzdC5cbiAgICogQHBhcmFtIHshc3RyaW5nfSB1cmwgVGhlIHJlcXVlc3QgVVJMLlxuICAgKiBAcGFyYW0ge1Jlc3BvbnNlT3B0aW9uc30gZGF0YSBUaGUgcmVjZWl2ZWQgZGF0YS5cbiAgICogQHBhcmFtIHtEYXRlPX0gbGFzdFVwZGF0ZWQgVGhlIGNhY2hlIGxhc3QgdXBkYXRlLCBjdXJyZW50IGRhdGUgaXMgdXNlZCBpZiBub3Qgc3BlY2lmaWVkLlxuICAgKi9cbiAgc2V0Q2FjaGVEYXRhKHVybDogc3RyaW5nLCBkYXRhOiBIdHRwUmVzcG9uc2U8YW55PiwgbGFzdFVwZGF0ZWQ/OiBEYXRlKSB7XG4gICAgdGhpcy5jYWNoZWREYXRhW3VybF0gPSB7XG4gICAgICBsYXN0VXBkYXRlZDogbGFzdFVwZGF0ZWQgfHwgbmV3IERhdGUoKSxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9O1xuICAgIGxvZy5kZWJ1ZyhgQ2FjaGUgc2V0IGZvciBrZXk6IFwiJHt1cmx9XCJgKTtcbiAgICB0aGlzLnNhdmVDYWNoZURhdGEoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjYWNoZWQgZGF0YSBmb3IgdGhlIHNwZWNpZmllZCByZXF1ZXN0LlxuICAgKiBAcGFyYW0geyFzdHJpbmd9IHVybCBUaGUgcmVxdWVzdCBVUkwuXG4gICAqIEByZXR1cm4gez9SZXNwb25zZU9wdGlvbnN9IFRoZSBjYWNoZWQgZGF0YSBvciBudWxsIGlmIG5vIGNhY2hlZCBkYXRhIGV4aXN0cyBmb3IgdGhpcyByZXF1ZXN0LlxuICAgKi9cbiAgZ2V0Q2FjaGVEYXRhKHVybDogc3RyaW5nKTogSHR0cFJlc3BvbnNlPGFueT4gfCBudWxsIHtcbiAgICBjb25zdCBjYWNoZUVudHJ5ID0gdGhpcy5jYWNoZWREYXRhW3VybF07XG5cbiAgICBpZiAoY2FjaGVFbnRyeSkge1xuICAgICAgbG9nLmRlYnVnKGBDYWNoZSBoaXQgZm9yIGtleTogXCIke3VybH1cImApO1xuICAgICAgcmV0dXJuIGNhY2hlRW50cnkuZGF0YTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjYWNoZWQgZW50cnkgZm9yIHRoZSBzcGVjaWZpZWQgcmVxdWVzdC5cbiAgICogQHBhcmFtIHshc3RyaW5nfSB1cmwgVGhlIHJlcXVlc3QgVVJMLlxuICAgKiBAcmV0dXJuIHs/SHR0cENhY2hlRW50cnl9IFRoZSBjYWNoZSBlbnRyeSBvciBudWxsIGlmIG5vIGNhY2hlIGVudHJ5IGV4aXN0cyBmb3IgdGhpcyByZXF1ZXN0LlxuICAgKi9cbiAgZ2V0SHR0cENhY2hlRW50cnkodXJsOiBzdHJpbmcpOiBIdHRwQ2FjaGVFbnRyeSB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmNhY2hlZERhdGFbdXJsXSB8fCBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgY2FjaGVkIGVudHJ5IChpZiBleGlzdHMpIGZvciB0aGUgc3BlY2lmaWVkIHJlcXVlc3QuXG4gICAqIEBwYXJhbSB7IXN0cmluZ30gdXJsIFRoZSByZXF1ZXN0IFVSTC5cbiAgICovXG4gIGNsZWFyQ2FjaGUodXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBkZWxldGUgdGhpcy5jYWNoZWREYXRhW3VybF07XG4gICAgbG9nLmRlYnVnKGBDYWNoZSBjbGVhcmVkIGZvciBrZXk6IFwiJHt1cmx9XCJgKTtcbiAgICB0aGlzLnNhdmVDYWNoZURhdGEoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbnMgY2FjaGUgZW50cmllcyBvbGRlciB0aGFuIHRoZSBzcGVjaWZpZWQgZGF0ZS5cbiAgICogQHBhcmFtIHtkYXRlPX0gZXhwaXJhdGlvbkRhdGUgVGhlIGNhY2hlIGV4cGlyYXRpb24gZGF0ZS4gSWYgbm8gZGF0ZSBpcyBzcGVjaWZpZWQsIGFsbCBjYWNoZSBpcyBjbGVhcmVkLlxuICAgKi9cbiAgY2xlYW5DYWNoZShleHBpcmF0aW9uRGF0ZT86IERhdGUpIHtcbiAgICBpZiAoZXhwaXJhdGlvbkRhdGUpIHtcbiAgICAgIGVhY2godGhpcy5jYWNoZWREYXRhLCAodmFsdWU6IEh0dHBDYWNoZUVudHJ5LCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoZXhwaXJhdGlvbkRhdGUgPj0gdmFsdWUubGFzdFVwZGF0ZWQpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5jYWNoZWREYXRhW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhY2hlZERhdGEgPSB7fTtcbiAgICB9XG4gICAgdGhpcy5zYXZlQ2FjaGVEYXRhKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY2FjaGUgcGVyc2lzdGVuY2UgcG9saWN5LlxuICAgKiBOb3RlIHRoYXQgY2hhbmdpbmcgdGhlIGNhY2hlIHBlcnNpc3RlbmNlIHdpbGwgYWxzbyBjbGVhciB0aGUgY2FjaGUgZnJvbSBpdHMgcHJldmlvdXMgc3RvcmFnZS5cbiAgICogQHBhcmFtIHsnbG9jYWwnfCdzZXNzaW9uJz19IHBlcnNpc3RlbmNlIEhvdyB0aGUgY2FjaGUgc2hvdWxkIGJlIHBlcnNpc3RlZCwgaXQgY2FuIGJlIGVpdGhlciBsb2NhbCBvciBzZXNzaW9uXG4gICAqICAgc3RvcmFnZSwgb3IgaWYgbm8gdmFsdWUgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBvbmx5IGluLW1lbW9yeSAoZGVmYXVsdCkuXG4gICAqL1xuICBzZXRQZXJzaXN0ZW5jZShwZXJzaXN0ZW5jZT86ICdsb2NhbCcgfCAnc2Vzc2lvbicpIHtcbiAgICB0aGlzLmNsZWFuQ2FjaGUoKTtcbiAgICB0aGlzLnN0b3JhZ2UgPSBwZXJzaXN0ZW5jZSA9PT0gJ2xvY2FsJyB8fCBwZXJzaXN0ZW5jZSA9PT0gJ3Nlc3Npb24nID8gd2luZG93W3BlcnNpc3RlbmNlICsgJ1N0b3JhZ2UnXSA6IG51bGw7XG4gICAgdGhpcy5sb2FkQ2FjaGVEYXRhKCk7XG4gIH1cblxuICBwcml2YXRlIHNhdmVDYWNoZURhdGEoKSB7XG4gICAgaWYgKHRoaXMuc3RvcmFnZSkge1xuICAgICAgdGhpcy5zdG9yYWdlW2NhY2hlUGVyc2lzdGVuY2VLZXldID0gSlNPTi5zdHJpbmdpZnkodGhpcy5jYWNoZWREYXRhKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGxvYWRDYWNoZURhdGEoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuc3RvcmFnZSA/IHRoaXMuc3RvcmFnZVtjYWNoZVBlcnNpc3RlbmNlS2V5XSA6IG51bGw7XG4gICAgdGhpcy5jYWNoZWREYXRhID0gZGF0YSA/IEpTT04ucGFyc2UoZGF0YSkgOiB7fTtcbiAgfVxuXG59XG4iXX0=