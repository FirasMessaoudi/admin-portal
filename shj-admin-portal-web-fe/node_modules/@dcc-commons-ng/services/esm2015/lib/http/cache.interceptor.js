var CacheInterceptor_1;
import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { HttpCacheService } from './http-cache.service';
/**
 * Caches HTTP requests.
 * Use ExtendedHttpClient fluent API to configure caching for each request.
 */
let CacheInterceptor = CacheInterceptor_1 = class CacheInterceptor {
    constructor(httpCacheService) {
        this.httpCacheService = httpCacheService;
        this.forceUpdate = false;
    }
    /**
     * Configures interceptor options
     * @param {{update: boolean}} options If update option is enabled, forces request to be made and updates cache entry.
     * @return {CacheInterceptor} The configured instance.
     */
    configure(options) {
        const instance = new CacheInterceptor_1(this.httpCacheService);
        if (options && options.update) {
            instance.forceUpdate = true;
        }
        return instance;
    }
    intercept(request, next) {
        if (request.method !== 'GET') {
            return next.handle(request);
        }
        return new Observable((subscriber) => {
            const cachedData = this.forceUpdate ? null : this.httpCacheService.getCacheData(request.urlWithParams);
            if (cachedData !== null) {
                // Create new response to avoid side-effects
                subscriber.next(new HttpResponse(cachedData));
                subscriber.complete();
            }
            else {
                next.handle(request)
                    .subscribe(event => {
                    if (event instanceof HttpResponse) {
                        this.httpCacheService.setCacheData(request.urlWithParams, event);
                    }
                    subscriber.next(event);
                }, error => subscriber.error(error), () => subscriber.complete());
            }
        });
    }
};
CacheInterceptor.ctorParameters = () => [
    { type: HttpCacheService }
];
CacheInterceptor = CacheInterceptor_1 = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [HttpCacheService])
], CacheInterceptor);
export { CacheInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGNjLWNvbW1vbnMtbmcvc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvaHR0cC9jYWNoZS5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUF1RCxZQUFZLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RyxPQUFPLEVBQUMsVUFBVSxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBRTVDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRXREOzs7R0FHRztBQUVILElBQWEsZ0JBQWdCLHdCQUE3QixNQUFhLGdCQUFnQjtJQUkzQixZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUY5QyxnQkFBVyxHQUFHLEtBQUssQ0FBQztJQUc1QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFNBQVMsQ0FBQyxPQUFxQztRQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLGtCQUFnQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzdELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDN0IsUUFBUSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDN0I7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsU0FBUyxDQUFDLE9BQXlCLEVBQUUsSUFBaUI7UUFDcEQsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0I7UUFFRCxPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsVUFBc0MsRUFBRSxFQUFFO1lBQy9ELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDdkcsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFO2dCQUN2Qiw0Q0FBNEM7Z0JBQzVDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsVUFBb0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hELFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUN2QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztxQkFDakIsU0FBUyxDQUNSLEtBQUssQ0FBQyxFQUFFO29CQUNOLElBQUksS0FBSyxZQUFZLFlBQVksRUFBRTt3QkFDakMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO3FCQUNsRTtvQkFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN6QixDQUFDLEVBQ0QsS0FBSyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUNoQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQzVCLENBQUM7YUFDTDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUVGLENBQUE7O1lBM0N1QyxnQkFBZ0I7O0FBSjNDLGdCQUFnQjtJQUQ1QixVQUFVLEVBQUU7cUNBSzJCLGdCQUFnQjtHQUozQyxnQkFBZ0IsQ0ErQzVCO1NBL0NZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QsIEh0dHBSZXNwb25zZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJzY3JpYmVyfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtIdHRwQ2FjaGVTZXJ2aWNlfSBmcm9tICcuL2h0dHAtY2FjaGUuc2VydmljZSc7XG5cbi8qKlxuICogQ2FjaGVzIEhUVFAgcmVxdWVzdHMuXG4gKiBVc2UgRXh0ZW5kZWRIdHRwQ2xpZW50IGZsdWVudCBBUEkgdG8gY29uZmlndXJlIGNhY2hpbmcgZm9yIGVhY2ggcmVxdWVzdC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhY2hlSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIHByaXZhdGUgZm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDYWNoZVNlcnZpY2U6IEh0dHBDYWNoZVNlcnZpY2UpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIGludGVyY2VwdG9yIG9wdGlvbnNcbiAgICogQHBhcmFtIHt7dXBkYXRlOiBib29sZWFufX0gb3B0aW9ucyBJZiB1cGRhdGUgb3B0aW9uIGlzIGVuYWJsZWQsIGZvcmNlcyByZXF1ZXN0IHRvIGJlIG1hZGUgYW5kIHVwZGF0ZXMgY2FjaGUgZW50cnkuXG4gICAqIEByZXR1cm4ge0NhY2hlSW50ZXJjZXB0b3J9IFRoZSBjb25maWd1cmVkIGluc3RhbmNlLlxuICAgKi9cbiAgY29uZmlndXJlKG9wdGlvbnM/OiB7IHVwZGF0ZT86IGJvb2xlYW4gfSB8IG51bGwpOiBDYWNoZUludGVyY2VwdG9yIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBDYWNoZUludGVyY2VwdG9yKHRoaXMuaHR0cENhY2hlU2VydmljZSk7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy51cGRhdGUpIHtcbiAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGlmIChyZXF1ZXN0Lm1ldGhvZCAhPT0gJ0dFVCcpIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8SHR0cEV2ZW50PGFueT4+KSA9PiB7XG4gICAgICBjb25zdCBjYWNoZWREYXRhID0gdGhpcy5mb3JjZVVwZGF0ZSA/IG51bGwgOiB0aGlzLmh0dHBDYWNoZVNlcnZpY2UuZ2V0Q2FjaGVEYXRhKHJlcXVlc3QudXJsV2l0aFBhcmFtcyk7XG4gICAgICBpZiAoY2FjaGVkRGF0YSAhPT0gbnVsbCkge1xuICAgICAgICAvLyBDcmVhdGUgbmV3IHJlc3BvbnNlIHRvIGF2b2lkIHNpZGUtZWZmZWN0c1xuICAgICAgICBzdWJzY3JpYmVyLm5leHQobmV3IEh0dHBSZXNwb25zZShjYWNoZWREYXRhIGFzIE9iamVjdCkpO1xuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0LmhhbmRsZShyZXF1ZXN0KVxuICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICBldmVudCA9PiB7XG4gICAgICAgICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaHR0cENhY2hlU2VydmljZS5zZXRDYWNoZURhdGEocmVxdWVzdC51cmxXaXRoUGFyYW1zLCBldmVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGV2ZW50KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvciA9PiBzdWJzY3JpYmVyLmVycm9yKGVycm9yKSxcbiAgICAgICAgICAgICgpID0+IHN1YnNjcmliZXIuY29tcGxldGUoKVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuIl19