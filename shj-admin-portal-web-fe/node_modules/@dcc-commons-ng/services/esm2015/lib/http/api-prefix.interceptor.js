import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
/**
 * Prefixes all requests with `environment.backendMappings`.
 */
let ApiPrefixInterceptor = class ApiPrefixInterceptor {
    constructor(environment) {
        this.environment = environment;
    }
    intercept(request, next) {
        if (this.environment.production || !this.environment.dev) {
            let backendUrlMappings = this.environment.backendMappings;
            let requestUrl, serverUrl;
            for (let urlMapping of backendUrlMappings) {
                if (request.url.startsWith(urlMapping.mapping)) {
                    serverUrl = urlMapping.url;
                    if (serverUrl.endsWith('/')) {
                        serverUrl = serverUrl.substring(0, serverUrl.length - 1);
                    }
                    requestUrl = request.url.replace(urlMapping.mapping, serverUrl);
                    break;
                }
            }
            request = request.clone({ url: requestUrl });
        }
        return next.handle(request);
    }
};
ApiPrefixInterceptor.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['environment',] }] }
];
ApiPrefixInterceptor = __decorate([
    Injectable(),
    __param(0, Inject('environment')),
    __metadata("design:paramtypes", [Object])
], ApiPrefixInterceptor);
export { ApiPrefixInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXByZWZpeC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkY2MtY29tbW9ucy1uZy9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9odHRwL2FwaS1wcmVmaXguaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBSWpEOztHQUVHO0FBRUgsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7SUFJL0IsWUFBbUMsV0FBZ0I7UUFDakQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7SUFDaEMsQ0FBQztJQUVELFNBQVMsQ0FBQyxPQUF5QixFQUFFLElBQWlCO1FBQ3BELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUN4RCxJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDO1lBQzFELElBQUksVUFBVSxFQUFFLFNBQWlCLENBQUM7WUFDbEMsS0FBSyxJQUFJLFVBQVUsSUFBSSxrQkFBa0IsRUFBRTtnQkFDekMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQzlDLFNBQVMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDO29CQUMzQixJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQzNCLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO3FCQUMxRDtvQkFDRCxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztvQkFDaEUsTUFBTTtpQkFDUDthQUNGO1lBQ0QsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBQyxHQUFHLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0YsQ0FBQTs7NENBdEJjLE1BQU0sU0FBQyxhQUFhOztBQUp0QixvQkFBb0I7SUFEaEMsVUFBVSxFQUFFO0lBS0UsV0FBQSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7O0dBSnZCLG9CQUFvQixDQTBCaEM7U0ExQlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIFByZWZpeGVzIGFsbCByZXF1ZXN0cyB3aXRoIGBlbnZpcm9ubWVudC5iYWNrZW5kTWFwcGluZ3NgLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXBpUHJlZml4SW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIHByaXZhdGUgZW52aXJvbm1lbnQ6IGFueTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KCdlbnZpcm9ubWVudCcpIGVudmlyb25tZW50OiBhbnkpIHtcbiAgICB0aGlzLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnRcbiAgfVxuXG4gIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5wcm9kdWN0aW9uIHx8ICF0aGlzLmVudmlyb25tZW50LmRldikge1xuICAgICAgbGV0IGJhY2tlbmRVcmxNYXBwaW5ncyA9IHRoaXMuZW52aXJvbm1lbnQuYmFja2VuZE1hcHBpbmdzO1xuICAgICAgbGV0IHJlcXVlc3RVcmwsIHNlcnZlclVybDogc3RyaW5nO1xuICAgICAgZm9yIChsZXQgdXJsTWFwcGluZyBvZiBiYWNrZW5kVXJsTWFwcGluZ3MpIHtcbiAgICAgICAgaWYgKHJlcXVlc3QudXJsLnN0YXJ0c1dpdGgodXJsTWFwcGluZy5tYXBwaW5nKSkge1xuICAgICAgICAgIHNlcnZlclVybCA9IHVybE1hcHBpbmcudXJsO1xuICAgICAgICAgIGlmIChzZXJ2ZXJVcmwuZW5kc1dpdGgoJy8nKSkge1xuICAgICAgICAgICAgc2VydmVyVXJsID0gc2VydmVyVXJsLnN1YnN0cmluZygwLCBzZXJ2ZXJVcmwubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcXVlc3RVcmwgPSByZXF1ZXN0LnVybC5yZXBsYWNlKHVybE1hcHBpbmcubWFwcGluZywgc2VydmVyVXJsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVxdWVzdCA9IHJlcXVlc3QuY2xvbmUoe3VybDogcmVxdWVzdFVybH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG4gIH1cbn1cbiJdfQ==