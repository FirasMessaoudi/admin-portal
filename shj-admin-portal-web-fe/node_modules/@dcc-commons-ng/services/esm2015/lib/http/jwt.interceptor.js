/*
 * Copyright (c) 2019 ELM. All rights reserved.
 */
import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { timer } from 'rxjs';
import { map } from 'rxjs/operators';
import { CookieService } from "ngx-cookie-service";
import { Router } from "@angular/router";
import { Logger } from "../logging";
const TOKEN_EXPIRY_COOKIE_NAME = 'X-SEC-TK-EXP';
const TOKEN_COOKIE_NAME = 'X-SEC-TK';
const CONTENT_TYPE_HEADER_NAME = 'Content-Type';
const USER_STORAGE_ITEM_KEY = 'currentUser';
const log = new Logger('Login');
export const PUBLIC_URL_PATTERNS = 'PUBLIC_URL_PATTERNS';
export const LOGIN_URL = 'LOGIN_URL';
let JwtInterceptor = class JwtInterceptor {
    constructor(cookieService, router, environment, publicUrlPatterns = [], loginUrl = '/login.html') {
        this.cookieService = cookieService;
        this.router = router;
        this.environment = environment;
        this.publicUrlPatterns = publicUrlPatterns;
        this.loginUrl = loginUrl;
        this.tokenExpiryDateTimerSubscription = null;
    }
    intercept(request, next) {
        let headers = request.headers;
        if (request.headers.get(CONTENT_TYPE_HEADER_NAME) == null) {
            headers = request.headers.append(CONTENT_TYPE_HEADER_NAME, 'application/json');
        }
        else if (request.headers.get(CONTENT_TYPE_HEADER_NAME).startsWith("multipart/form-data")) {
            headers = request.headers.delete(CONTENT_TYPE_HEADER_NAME);
        }
        let currentUser = JSON.parse(localStorage.getItem(USER_STORAGE_ITEM_KEY));
        if (currentUser && this.tokenExpiryDateTimerSubscription == null) {
            this.refreshTokenTimer();
        }
        request = request.clone({ headers });
        const started = Date.now();
        return next.handle(request).pipe(map(event => {
            if (event instanceof HttpResponse) {
                if (!this.environment.production) {
                    const elapsed = Date.now() - started;
                    console.log(`Request for ${request.urlWithParams} took ${elapsed} ms.`);
                }
                if (this.cookieService.get(TOKEN_EXPIRY_COOKIE_NAME)) {
                    console.log(`found ${TOKEN_EXPIRY_COOKIE_NAME} with value [${this.cookieService.get(TOKEN_EXPIRY_COOKIE_NAME)}]`);
                    if (this.tokenExpiryDateTimerSubscription) {
                        this.tokenExpiryDateTimerSubscription.unsubscribe();
                        this.refreshTokenTimer();
                    }
                }
            }
            return event;
        }));
    }
    refreshTokenTimer() {
        let isPublicUrl = false;
        this.publicUrlPatterns.forEach((urlPattern) => {
            isPublicUrl = isPublicUrl || this.router.url.startsWith(urlPattern);
        });
        if (isPublicUrl && !this.router.url.startsWith(this.loginUrl)) {
            // do nothing
            log.debug('skipping public url...');
            return;
        }
        log.debug('secured url, setting timer...');
        let tokenExpiry = this.cookieService.get(TOKEN_EXPIRY_COOKIE_NAME);
        this.tokenExpiryDateTimerSubscription = timer(tokenExpiry).subscribe(() => {
            localStorage.removeItem(USER_STORAGE_ITEM_KEY);
            this.cookieService.delete(TOKEN_EXPIRY_COOKIE_NAME);
            this.cookieService.delete(TOKEN_COOKIE_NAME);
            this.router.navigate([this.loginUrl], { replaceUrl: true });
        });
    }
};
JwtInterceptor.ctorParameters = () => [
    { type: CookieService },
    { type: Router },
    { type: undefined, decorators: [{ type: Inject, args: ['environment',] }] },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [PUBLIC_URL_PATTERNS,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOGIN_URL,] }] }
];
JwtInterceptor = __decorate([
    Injectable(),
    __param(2, Inject('environment')),
    __param(3, Optional()), __param(3, Inject(PUBLIC_URL_PATTERNS)),
    __param(4, Optional()), __param(4, Inject(LOGIN_URL)),
    __metadata("design:paramtypes", [CookieService, Router, Object, Array, String])
], JwtInterceptor);
export { JwtInterceptor };
//# sourceMappingURL=data:application/json;base64,