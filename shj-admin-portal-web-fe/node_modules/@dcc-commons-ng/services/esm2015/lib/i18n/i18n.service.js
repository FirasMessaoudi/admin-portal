import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { LangChangeEvent, TranslateService } from '@ngx-translate/core';
import { includes } from 'lodash';
import { Logger } from '../logging/logging.service';
const log = new Logger('I18nService');
const languageKey = 'language';
/**
 * Pass-through function to mark a string for translation extraction.
 * Running `npm translations:extract` will include the given string by using this.
 * @param {string} s The string to extract for translation.
 * @return {string} The same string.
 */
export function extract(s) {
    return s;
}
let I18nService = class I18nService {
    constructor(translateService) {
        this.translateService = translateService;
        this.defaultLanguage = "en-US";
    }
    /**
     * Gets the current language.
     * @return {string} The current language code.
     */
    get language() {
        return this.translateService.currentLang;
    }
    /**
     * Sets the current language.
     * Note: The current language is saved to the local storage.
     * If no parameter is specified, the language is loaded from local storage (if present).
     * @param {string} language The IETF language code to set.
     */
    set language(language) {
        language = language || localStorage.getItem(languageKey) || this.translateService.getBrowserCultureLang();
        let isSupportedLanguage = includes(this.supportedLanguages, language);
        // If no exact match is found, search without the region
        if (language && !isSupportedLanguage) {
            language = language.split('-')[0];
            language = this.supportedLanguages.find(supportedLanguage => supportedLanguage.startsWith(language)) || '';
            isSupportedLanguage = Boolean(language);
        }
        // Fallback if language is not supported
        if (!isSupportedLanguage) {
            if (this.translateService.getBrowserLang() !== undefined) {
                language = this.translateService.getBrowserLang();
            }
            else {
                language = this.defaultLanguage;
            }
        }
        log.debug(`Language set to ${language}`);
        this.translateService.use(language);
        if (language && language.startsWith('ar')) {
            document.querySelector("html").setAttribute('dir', 'rtl');
            document.querySelector("html").setAttribute('lang', language);
        }
        else {
            document.querySelector("html").setAttribute('dir', 'ltr');
            document.querySelector("html").setAttribute('lang', language);
        }
    }
    /**
     * Initializes i18n for the application.
     * Loads language from local storage if present, or sets default language.
     * @param {!string} defaultLanguage The default language to use.
     * @param {Array.<String>} supportedLanguages The list of supported languages.
     */
    init(defaultLanguage, supportedLanguages) {
        this.defaultLanguage = defaultLanguage;
        this.supportedLanguages = supportedLanguages;
        this.language = '';
        this.translateService.onLangChange
            .subscribe((event) => {
            localStorage.setItem(languageKey, event.lang);
        });
    }
};
I18nService.ctorParameters = () => [
    { type: TranslateService }
];
I18nService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [TranslateService])
], I18nService);
export { I18nService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRjYy1jb21tb25zLW5nL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2kxOG4vaTE4bi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxlQUFlLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRWhDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUVsRCxNQUFNLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0QyxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUM7QUFFL0I7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsT0FBTyxDQUFDLENBQVM7SUFDL0IsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBR0QsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztJQUt0QixZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUh0RCxvQkFBZSxHQUFXLE9BQU8sQ0FBQztJQUlsQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO0lBQzNDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILElBQUksUUFBUSxDQUFDLFFBQWdCO1FBQzNCLFFBQVEsR0FBRyxRQUFRLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUMxRyxJQUFJLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFdEUsd0RBQXdEO1FBQ3hELElBQUksUUFBUSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDcEMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsUUFBUSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMzRyxtQkFBbUIsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDekM7UUFFRCx3Q0FBd0M7UUFDeEMsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQ3hCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxLQUFLLFNBQVMsRUFBRTtnQkFDeEQsUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUNuRDtpQkFBTTtnQkFDTCxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQzthQUNqQztTQUNGO1FBRUQsR0FBRyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXBDLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzFELFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztTQUMvRDthQUFNO1lBQ0wsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzFELFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILElBQUksQ0FBQyxlQUF1QixFQUFFLGtCQUE0QjtRQUN4RCxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVk7YUFDL0IsU0FBUyxDQUFDLENBQUMsS0FBc0IsRUFBRSxFQUFFO1lBQ3BDLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FFRixDQUFBOztZQWxFdUMsZ0JBQWdCOztBQUwzQyxXQUFXO0lBRHZCLFVBQVUsRUFBRTtxQ0FNMkIsZ0JBQWdCO0dBTDNDLFdBQVcsQ0F1RXZCO1NBdkVZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtMYW5nQ2hhbmdlRXZlbnQsIFRyYW5zbGF0ZVNlcnZpY2V9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHtpbmNsdWRlc30gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4uL2xvZ2dpbmcvbG9nZ2luZy5zZXJ2aWNlJztcblxuY29uc3QgbG9nID0gbmV3IExvZ2dlcignSTE4blNlcnZpY2UnKTtcbmNvbnN0IGxhbmd1YWdlS2V5ID0gJ2xhbmd1YWdlJztcblxuLyoqXG4gKiBQYXNzLXRocm91Z2ggZnVuY3Rpb24gdG8gbWFyayBhIHN0cmluZyBmb3IgdHJhbnNsYXRpb24gZXh0cmFjdGlvbi5cbiAqIFJ1bm5pbmcgYG5wbSB0cmFuc2xhdGlvbnM6ZXh0cmFjdGAgd2lsbCBpbmNsdWRlIHRoZSBnaXZlbiBzdHJpbmcgYnkgdXNpbmcgdGhpcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzIFRoZSBzdHJpbmcgdG8gZXh0cmFjdCBmb3IgdHJhbnNsYXRpb24uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzYW1lIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3Qoczogc3RyaW5nKSB7XG4gIHJldHVybiBzO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSTE4blNlcnZpY2Uge1xuXG4gIGRlZmF1bHRMYW5ndWFnZTogc3RyaW5nID0gXCJlbi1VU1wiO1xuICBzdXBwb3J0ZWRMYW5ndWFnZXM6IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgbGFuZ3VhZ2UuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGN1cnJlbnQgbGFuZ3VhZ2UgY29kZS5cbiAgICovXG4gIGdldCBsYW5ndWFnZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuY3VycmVudExhbmc7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCBsYW5ndWFnZS5cbiAgICogTm90ZTogVGhlIGN1cnJlbnQgbGFuZ3VhZ2UgaXMgc2F2ZWQgdG8gdGhlIGxvY2FsIHN0b3JhZ2UuXG4gICAqIElmIG5vIHBhcmFtZXRlciBpcyBzcGVjaWZpZWQsIHRoZSBsYW5ndWFnZSBpcyBsb2FkZWQgZnJvbSBsb2NhbCBzdG9yYWdlIChpZiBwcmVzZW50KS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIFRoZSBJRVRGIGxhbmd1YWdlIGNvZGUgdG8gc2V0LlxuICAgKi9cbiAgc2V0IGxhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcpIHtcbiAgICBsYW5ndWFnZSA9IGxhbmd1YWdlIHx8IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGxhbmd1YWdlS2V5KSB8fCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0QnJvd3NlckN1bHR1cmVMYW5nKCk7XG4gICAgbGV0IGlzU3VwcG9ydGVkTGFuZ3VhZ2UgPSBpbmNsdWRlcyh0aGlzLnN1cHBvcnRlZExhbmd1YWdlcywgbGFuZ3VhZ2UpO1xuXG4gICAgLy8gSWYgbm8gZXhhY3QgbWF0Y2ggaXMgZm91bmQsIHNlYXJjaCB3aXRob3V0IHRoZSByZWdpb25cbiAgICBpZiAobGFuZ3VhZ2UgJiYgIWlzU3VwcG9ydGVkTGFuZ3VhZ2UpIHtcbiAgICAgIGxhbmd1YWdlID0gbGFuZ3VhZ2Uuc3BsaXQoJy0nKVswXTtcbiAgICAgIGxhbmd1YWdlID0gdGhpcy5zdXBwb3J0ZWRMYW5ndWFnZXMuZmluZChzdXBwb3J0ZWRMYW5ndWFnZSA9PiBzdXBwb3J0ZWRMYW5ndWFnZS5zdGFydHNXaXRoKGxhbmd1YWdlKSkgfHwgJyc7XG4gICAgICBpc1N1cHBvcnRlZExhbmd1YWdlID0gQm9vbGVhbihsYW5ndWFnZSk7XG4gICAgfVxuXG4gICAgLy8gRmFsbGJhY2sgaWYgbGFuZ3VhZ2UgaXMgbm90IHN1cHBvcnRlZFxuICAgIGlmICghaXNTdXBwb3J0ZWRMYW5ndWFnZSkge1xuICAgICAgaWYgKHRoaXMudHJhbnNsYXRlU2VydmljZS5nZXRCcm93c2VyTGFuZygpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGFuZ3VhZ2UgPSB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0QnJvd3NlckxhbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxhbmd1YWdlID0gdGhpcy5kZWZhdWx0TGFuZ3VhZ2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9nLmRlYnVnKGBMYW5ndWFnZSBzZXQgdG8gJHtsYW5ndWFnZX1gKTtcbiAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UudXNlKGxhbmd1YWdlKTtcblxuICAgIGlmIChsYW5ndWFnZSAmJiBsYW5ndWFnZS5zdGFydHNXaXRoKCdhcicpKSB7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaHRtbFwiKS5zZXRBdHRyaWJ1dGUoJ2RpcicsICdydGwnKTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJodG1sXCIpLnNldEF0dHJpYnV0ZSgnbGFuZycsIGxhbmd1YWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImh0bWxcIikuc2V0QXR0cmlidXRlKCdkaXInLCAnbHRyJyk7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaHRtbFwiKS5zZXRBdHRyaWJ1dGUoJ2xhbmcnLCBsYW5ndWFnZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGkxOG4gZm9yIHRoZSBhcHBsaWNhdGlvbi5cbiAgICogTG9hZHMgbGFuZ3VhZ2UgZnJvbSBsb2NhbCBzdG9yYWdlIGlmIHByZXNlbnQsIG9yIHNldHMgZGVmYXVsdCBsYW5ndWFnZS5cbiAgICogQHBhcmFtIHshc3RyaW5nfSBkZWZhdWx0TGFuZ3VhZ2UgVGhlIGRlZmF1bHQgbGFuZ3VhZ2UgdG8gdXNlLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBzdXBwb3J0ZWRMYW5ndWFnZXMgVGhlIGxpc3Qgb2Ygc3VwcG9ydGVkIGxhbmd1YWdlcy5cbiAgICovXG4gIGluaXQoZGVmYXVsdExhbmd1YWdlOiBzdHJpbmcsIHN1cHBvcnRlZExhbmd1YWdlczogc3RyaW5nW10pIHtcbiAgICB0aGlzLmRlZmF1bHRMYW5ndWFnZSA9IGRlZmF1bHRMYW5ndWFnZTtcbiAgICB0aGlzLnN1cHBvcnRlZExhbmd1YWdlcyA9IHN1cHBvcnRlZExhbmd1YWdlcztcbiAgICB0aGlzLmxhbmd1YWdlID0gJyc7XG5cbiAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2Uub25MYW5nQ2hhbmdlXG4gICAgICAuc3Vic2NyaWJlKChldmVudDogTGFuZ0NoYW5nZUV2ZW50KSA9PiB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGxhbmd1YWdlS2V5LCBldmVudC5sYW5nKTtcbiAgICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==