import { Pipe, NgModule } from '@angular/core';
import { __extends } from 'tslib';
import { DatePipe } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HijriFormatPipe = /** @class */ (function () {
    function HijriFormatPipe() {
    }
    /**
     * Formats the value (numeric like 14401015) to a date format (1440/10/15)
     *
     * @param value the field value
     * @param args the field arguments
     * @returns the formatted value
     */
    /**
     * Formats the value (numeric like 14401015) to a date format (1440/10/15)
     *
     * @param {?} value the field value
     * @param {?=} args the field arguments
     * @return {?} the formatted value
     */
    HijriFormatPipe.prototype.transform = /**
     * Formats the value (numeric like 14401015) to a date format (1440/10/15)
     *
     * @param {?} value the field value
     * @param {?=} args the field arguments
     * @return {?} the formatted value
     */
    function (value, args) {
        /** @type {?} */
        var result = value + '' || '';
        if (isNaN(value) || result.length != 8) {
            return '';
        }
        return result.substring(0, 4) + '/' + result.substring(4, 6) + '/' + result.substring(6, 8);
    };
    HijriFormatPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'hijriFormat'
                },] }
    ];
    return HijriFormatPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateFormatPipe = /** @class */ (function (_super) {
    __extends(DateFormatPipe, _super);
    function DateFormatPipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    DateFormatPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    function (value, args) {
        return _super.prototype.transform.call(this, value, DateFormatPipe.DATE_FMT);
    };
    DateFormatPipe.DATE_FMT = 'dd/MM/yyyy';
    DateFormatPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'dateFormat'
                },] }
    ];
    return DateFormatPipe;
}(DatePipe));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateTimeFormatPipe = /** @class */ (function (_super) {
    __extends(DateTimeFormatPipe, _super);
    function DateTimeFormatPipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    DateTimeFormatPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    function (value, args) {
        return _super.prototype.transform.call(this, value, DateTimeFormatPipe.DATE_TIME_FMT);
    };
    DateTimeFormatPipe.DATE_TIME_FMT = DateFormatPipe.DATE_FMT + " hh:mm";
    DateTimeFormatPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'dateTimeFormat'
                },] }
    ];
    return DateTimeFormatPipe;
}(DatePipe));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MobileNumberFormatPipe = /** @class */ (function () {
    function MobileNumberFormatPipe() {
    }
    /**
     * Formats the value (numeric like 5123456789) to a mobile format (+966 5123456789)
     *
     * @param value the field value
     * @param args the field arguments
     * @returns the formatted value
     */
    /**
     * Formats the value (numeric like 5123456789) to a mobile format (+966 5123456789)
     *
     * @param {?} value the field value
     * @param {?=} args the field arguments
     * @return {?} the formatted value
     */
    MobileNumberFormatPipe.prototype.transform = /**
     * Formats the value (numeric like 5123456789) to a mobile format (+966 5123456789)
     *
     * @param {?} value the field value
     * @param {?=} args the field arguments
     * @return {?} the formatted value
     */
    function (value, args) {
        /** @type {?} */
        var result = value + '' || '';
        if (isNaN(value) || result.length != 9) {
            return '';
        }
        return '+966 ' + result;
    };
    MobileNumberFormatPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'mobileFormat'
                },] }
    ];
    return MobileNumberFormatPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DccCommonsNgPipesModule = /** @class */ (function () {
    function DccCommonsNgPipesModule() {
    }
    DccCommonsNgPipesModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        HijriFormatPipe,
                        DateFormatPipe,
                        DateTimeFormatPipe,
                        MobileNumberFormatPipe
                    ],
                    exports: [
                        HijriFormatPipe,
                        DateFormatPipe,
                        DateTimeFormatPipe,
                        MobileNumberFormatPipe
                    ],
                    providers: []
                },] }
    ];
    return DccCommonsNgPipesModule;
}());

export { DccCommonsNgPipesModule, HijriFormatPipe as ɵa, DateFormatPipe as ɵb, DateTimeFormatPipe as ɵc, MobileNumberFormatPipe as ɵd };
//# sourceMappingURL=dcc-commons-ng-pipes.js.map
