import { Pipe, NgModule } from '@angular/core';
import { DatePipe } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class HijriFormatPipe {
    /**
     * Formats the value (numeric like 14401015) to a date format (1440/10/15)
     *
     * @param {?} value the field value
     * @param {?=} args the field arguments
     * @return {?} the formatted value
     */
    transform(value, args) {
        /** @type {?} */
        let result = value + '' || '';
        if (isNaN(value) || result.length != 8) {
            return '';
        }
        return result.substring(0, 4) + '/' + result.substring(4, 6) + '/' + result.substring(6, 8);
    }
}
HijriFormatPipe.ɵfac = function HijriFormatPipe_Factory(t) { return new (t || HijriFormatPipe)(); };
HijriFormatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "hijriFormat", type: HijriFormatPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HijriFormatPipe, [{
        type: Pipe,
        args: [{
                name: 'hijriFormat'
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateFormatPipe extends DatePipe {
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        return super.transform(value, DateFormatPipe.DATE_FMT);
    }
}
DateFormatPipe.ɵfac = function DateFormatPipe_Factory(t) { return ɵDateFormatPipe_BaseFactory(t || DateFormatPipe); };
DateFormatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dateFormat", type: DateFormatPipe, pure: true });
DateFormatPipe.DATE_FMT = 'dd/MM/yyyy';
const ɵDateFormatPipe_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DateFormatPipe);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateFormatPipe, [{
        type: Pipe,
        args: [{
                name: 'dateFormat'
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateTimeFormatPipe extends DatePipe {
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        return super.transform(value, DateTimeFormatPipe.DATE_TIME_FMT);
    }
}
DateTimeFormatPipe.ɵfac = function DateTimeFormatPipe_Factory(t) { return ɵDateTimeFormatPipe_BaseFactory(t || DateTimeFormatPipe); };
DateTimeFormatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dateTimeFormat", type: DateTimeFormatPipe, pure: true });
DateTimeFormatPipe.DATE_TIME_FMT = `${DateFormatPipe.DATE_FMT} hh:mm`;
const ɵDateTimeFormatPipe_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DateTimeFormatPipe);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateTimeFormatPipe, [{
        type: Pipe,
        args: [{
                name: 'dateTimeFormat'
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MobileNumberFormatPipe {
    /**
     * Formats the value (numeric like 5123456789) to a mobile format (+966 5123456789)
     *
     * @param {?} value the field value
     * @param {?=} args the field arguments
     * @return {?} the formatted value
     */
    transform(value, args) {
        /** @type {?} */
        let result = value + '' || '';
        if (isNaN(value) || result.length != 9) {
            return '';
        }
        return '+966 ' + result;
    }
}
MobileNumberFormatPipe.ɵfac = function MobileNumberFormatPipe_Factory(t) { return new (t || MobileNumberFormatPipe)(); };
MobileNumberFormatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "mobileFormat", type: MobileNumberFormatPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MobileNumberFormatPipe, [{
        type: Pipe,
        args: [{
                name: 'mobileFormat'
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DccCommonsNgPipesModule {
}
DccCommonsNgPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DccCommonsNgPipesModule });
DccCommonsNgPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DccCommonsNgPipesModule_Factory(t) { return new (t || DccCommonsNgPipesModule)(); }, providers: [], imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DccCommonsNgPipesModule, { declarations: [HijriFormatPipe,
        DateFormatPipe,
        DateTimeFormatPipe,
        MobileNumberFormatPipe], exports: [HijriFormatPipe,
        DateFormatPipe,
        DateTimeFormatPipe,
        MobileNumberFormatPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DccCommonsNgPipesModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [
                    HijriFormatPipe,
                    DateFormatPipe,
                    DateTimeFormatPipe,
                    MobileNumberFormatPipe
                ],
                exports: [
                    HijriFormatPipe,
                    DateFormatPipe,
                    DateTimeFormatPipe,
                    MobileNumberFormatPipe
                ],
                providers: []
            }]
    }], null, null); })();

export { DccCommonsNgPipesModule, HijriFormatPipe as ɵa, DateFormatPipe as ɵb, DateTimeFormatPipe as ɵc, MobileNumberFormatPipe as ɵd };

//# sourceMappingURL=dcc-commons-ng-pipes.js.map