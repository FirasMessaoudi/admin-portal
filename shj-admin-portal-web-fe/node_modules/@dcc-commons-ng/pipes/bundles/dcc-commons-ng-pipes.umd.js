(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@dcc-commons-ng/pipes', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory((global['dcc-commons-ng'] = global['dcc-commons-ng'] || {}, global['dcc-commons-ng'].pipes = {}), global.ng.core, global.ng.common));
}(this, function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HijriFormatPipe = /** @class */ (function () {
        function HijriFormatPipe() {
        }
        /**
         * Formats the value (numeric like 14401015) to a date format (1440/10/15)
         *
         * @param value the field value
         * @param args the field arguments
         * @returns the formatted value
         */
        /**
         * Formats the value (numeric like 14401015) to a date format (1440/10/15)
         *
         * @param {?} value the field value
         * @param {?=} args the field arguments
         * @return {?} the formatted value
         */
        HijriFormatPipe.prototype.transform = /**
         * Formats the value (numeric like 14401015) to a date format (1440/10/15)
         *
         * @param {?} value the field value
         * @param {?=} args the field arguments
         * @return {?} the formatted value
         */
        function (value, args) {
            /** @type {?} */
            var result = value + '' || '';
            if (isNaN(value) || result.length != 8) {
                return '';
            }
            return result.substring(0, 4) + '/' + result.substring(4, 6) + '/' + result.substring(6, 8);
        };
        HijriFormatPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'hijriFormat'
                    },] }
        ];
        return HijriFormatPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateFormatPipe = /** @class */ (function (_super) {
        __extends(DateFormatPipe, _super);
        function DateFormatPipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        DateFormatPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        function (value, args) {
            return _super.prototype.transform.call(this, value, DateFormatPipe.DATE_FMT);
        };
        DateFormatPipe.DATE_FMT = 'dd/MM/yyyy';
        DateFormatPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'dateFormat'
                    },] }
        ];
        return DateFormatPipe;
    }(common.DatePipe));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateTimeFormatPipe = /** @class */ (function (_super) {
        __extends(DateTimeFormatPipe, _super);
        function DateTimeFormatPipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        DateTimeFormatPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        function (value, args) {
            return _super.prototype.transform.call(this, value, DateTimeFormatPipe.DATE_TIME_FMT);
        };
        DateTimeFormatPipe.DATE_TIME_FMT = DateFormatPipe.DATE_FMT + " hh:mm";
        DateTimeFormatPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'dateTimeFormat'
                    },] }
        ];
        return DateTimeFormatPipe;
    }(common.DatePipe));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MobileNumberFormatPipe = /** @class */ (function () {
        function MobileNumberFormatPipe() {
        }
        /**
         * Formats the value (numeric like 5123456789) to a mobile format (+966 5123456789)
         *
         * @param value the field value
         * @param args the field arguments
         * @returns the formatted value
         */
        /**
         * Formats the value (numeric like 5123456789) to a mobile format (+966 5123456789)
         *
         * @param {?} value the field value
         * @param {?=} args the field arguments
         * @return {?} the formatted value
         */
        MobileNumberFormatPipe.prototype.transform = /**
         * Formats the value (numeric like 5123456789) to a mobile format (+966 5123456789)
         *
         * @param {?} value the field value
         * @param {?=} args the field arguments
         * @return {?} the formatted value
         */
        function (value, args) {
            /** @type {?} */
            var result = value + '' || '';
            if (isNaN(value) || result.length != 9) {
                return '';
            }
            return '+966 ' + result;
        };
        MobileNumberFormatPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'mobileFormat'
                    },] }
        ];
        return MobileNumberFormatPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DccCommonsNgPipesModule = /** @class */ (function () {
        function DccCommonsNgPipesModule() {
        }
        DccCommonsNgPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [
                            HijriFormatPipe,
                            DateFormatPipe,
                            DateTimeFormatPipe,
                            MobileNumberFormatPipe
                        ],
                        exports: [
                            HijriFormatPipe,
                            DateFormatPipe,
                            DateTimeFormatPipe,
                            MobileNumberFormatPipe
                        ],
                        providers: []
                    },] }
        ];
        return DccCommonsNgPipesModule;
    }());

    exports.DccCommonsNgPipesModule = DccCommonsNgPipesModule;
    exports.ɵa = HijriFormatPipe;
    exports.ɵb = DateFormatPipe;
    exports.ɵc = DateTimeFormatPipe;
    exports.ɵd = MobileNumberFormatPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=dcc-commons-ng-pipes.umd.js.map
